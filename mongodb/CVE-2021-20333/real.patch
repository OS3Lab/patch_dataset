From 78a269596edf46413b8533132d10da995953d5ee Mon Sep 17 00:00:00 2001
From: Sara Golemon <sara.golemon@mongodb.com>
Date: Fri, 28 Aug 2020 17:02:46 +0000
Subject: [PATCH] SERVER-50605 Add logMessage test-only command

Based on:
(cherry picked from commit 273cba82968bab5316b5f937875757a12f363626)

Refactored to accomodate logv1
---
 jstests/core/escaped-logs.js                  | 17 +++++
 jstests/core/views/views_all_commands.js      |  1 +
 .../db_reads_while_recovering_all_commands.js |  3 +-
 ...abase_and_shard_versioning_all_commands.js |  1 +
 .../safe_secondary_reads_drop_recreate.js     |  1 +
 ...single_migration_suspend_range_deletion.js |  1 +
 ...ry_reads_single_migration_waitForDelete.js |  1 +
 src/mongo/db/commands/generic.cpp             | 41 ++++++++++++
 .../db/initialize_server_global_state.cpp     |  1 +
 .../mongo_embedded/mongo_embedded_test.cpp    |  1 +
 src/mongo/logger/logstream_builder.cpp        |  2 +
 src/mongo/logger/logstream_builder.h          | 66 +++++++++++++++----
 12 files changed, 123 insertions(+), 13 deletions(-)
 create mode 100644 jstests/core/escaped-logs.js

diff --git a/jstests/core/escaped-logs.js b/jstests/core/escaped-logs.js
new file mode 100644
index 00000000000..e0b6407150e
--- /dev/null
+++ b/jstests/core/escaped-logs.js
@@ -0,0 +1,17 @@
+// Test escaping of user provided data in logs
+// @tags: [requires_non_retryable_commands]
+
+(function() {
+'use strict';
+
+const mongo = db.getMongo();
+const admin = mongo.getDB('admin');
+
+// Test a range of characters sent to the global log
+for (let i = 1; i < 256; ++i) {
+    const msg = "Hello" + String.fromCharCode(i) + "World";
+    assert.commandWorked(admin.runCommand({logMessage: msg}));
+    const escmsg = msg.replace("\r", "\\r").replace("\n", "\\n");
+    checkLog.contains(mongo, "logMessage: " + escmsg);
+}
+})();
diff --git a/jstests/core/views/views_all_commands.js b/jstests/core/views/views_all_commands.js
index e880c3badb8..5b314a0d5be 100644
--- a/jstests/core/views/views_all_commands.js
+++ b/jstests/core/views/views_all_commands.js
@@ -358,6 +358,7 @@ let viewsCommandTests = {
     listShards: {skip: isUnrelated},
     lockInfo: {skip: isUnrelated},
     logApplicationMessage: {skip: isUnrelated},
+    logMessage: {skip: isUnrelated},
     logRotate: {skip: isUnrelated},
     logout: {skip: isUnrelated},
     makeSnapshot: {skip: isAnInternalCommand},
diff --git a/jstests/replsets/db_reads_while_recovering_all_commands.js b/jstests/replsets/db_reads_while_recovering_all_commands.js
index 0a70c18c3a0..586adf96340 100644
--- a/jstests/replsets/db_reads_while_recovering_all_commands.js
+++ b/jstests/replsets/db_reads_while_recovering_all_commands.js
@@ -216,6 +216,7 @@ const allCommands = {
     },
     lockInfo: {skip: isPrimaryOnly},
     logApplicationMessage: {skip: isNotAUserDataRead},
+    logMessage: {skip: isNotAUserDataRead},
     logRotate: {skip: isNotAUserDataRead},
     logout: {skip: isNotAUserDataRead},
     makeSnapshot: {skip: isNotAUserDataRead},
@@ -358,4 +359,4 @@ AllCommandsTest.testAllCommands(secondary, allCommands, function(test) {
 // Turn off maintenance mode and stop the test.
 assert.commandWorked(secondary.adminCommand({replSetMaintenance: 0}));
 rst.stopSet();
-})();
\ No newline at end of file
+})();
diff --git a/jstests/sharding/database_and_shard_versioning_all_commands.js b/jstests/sharding/database_and_shard_versioning_all_commands.js
index 3352aef2f72..4072dc910a5 100644
--- a/jstests/sharding/database_and_shard_versioning_all_commands.js
+++ b/jstests/sharding/database_and_shard_versioning_all_commands.js
@@ -271,6 +271,7 @@ let testCases = {
     },
     listShards: {skip: "does not forward command to primary shard"},
     logApplicationMessage: {skip: "not on a user database", conditional: true},
+    logMessage: {skip: "not on a user database"},
     logRotate: {skip: "executes locally on mongos (not sent to any remote node)"},
     logout: {skip: "not on a user database"},
     mapReduce: {
diff --git a/jstests/sharding/safe_secondary_reads_drop_recreate.js b/jstests/sharding/safe_secondary_reads_drop_recreate.js
index e08a6d08bfc..53189a6a4b4 100644
--- a/jstests/sharding/safe_secondary_reads_drop_recreate.js
+++ b/jstests/sharding/safe_secondary_reads_drop_recreate.js
@@ -206,6 +206,7 @@ let testCases = {
     listShards: {skip: "does not return user data"},
     lockInfo: {skip: "primary only"},
     logApplicationMessage: {skip: "primary only"},
+    logMessage: {skip: "does not return user data"},
     logRotate: {skip: "does not return user data"},
     logout: {skip: "does not return user data"},
     makeSnapshot: {skip: "does not return user data"},
diff --git a/jstests/sharding/safe_secondary_reads_single_migration_suspend_range_deletion.js b/jstests/sharding/safe_secondary_reads_single_migration_suspend_range_deletion.js
index 8e254514d0b..ea8eed44988 100644
--- a/jstests/sharding/safe_secondary_reads_single_migration_suspend_range_deletion.js
+++ b/jstests/sharding/safe_secondary_reads_single_migration_suspend_range_deletion.js
@@ -236,6 +236,7 @@ let testCases = {
     listShards: {skip: "does not return user data"},
     lockInfo: {skip: "primary only"},
     logApplicationMessage: {skip: "primary only"},
+    logMessage: {skip: "does not return user data"},
     logRotate: {skip: "does not return user data"},
     logout: {skip: "does not return user data"},
     makeSnapshot: {skip: "does not return user data"},
diff --git a/jstests/sharding/safe_secondary_reads_single_migration_waitForDelete.js b/jstests/sharding/safe_secondary_reads_single_migration_waitForDelete.js
index 4a56fb23cb6..006a1219ff6 100644
--- a/jstests/sharding/safe_secondary_reads_single_migration_waitForDelete.js
+++ b/jstests/sharding/safe_secondary_reads_single_migration_waitForDelete.js
@@ -209,6 +209,7 @@ let testCases = {
     listShards: {skip: "does not return user data"},
     lockInfo: {skip: "primary only"},
     logApplicationMessage: {skip: "primary only"},
+    logMessage: {skip: "does not return user data"},
     logRotate: {skip: "does not return user data"},
     logout: {skip: "does not return user data"},
     makeSnapshot: {skip: "does not return user data"},
diff --git a/src/mongo/db/commands/generic.cpp b/src/mongo/db/commands/generic.cpp
index 786084fe6ac..8090acbe864 100644
--- a/src/mongo/db/commands/generic.cpp
+++ b/src/mongo/db/commands/generic.cpp
@@ -192,5 +192,46 @@ public:
 
 } listCommandsCmd;
 
+class CmdLogMessage : public BasicCommand {
+public:
+    CmdLogMessage() : BasicCommand("logMessage") {}
+
+    std::string help() const final {
+        return "Send a message to the server log";
+    }
+
+    bool supportsWriteConcern(const BSONObj& cmd) const final {
+        return false;
+    }
+
+    AllowedOnSecondary secondaryAllowed(ServiceContext*) const final {
+        return AllowedOnSecondary::kAlways;
+    }
+
+    bool adminOnly() const final {
+        return true;
+    }
+
+    void addRequiredPrivileges(const std::string& dbname,
+                               const BSONObj& cmdObj,
+                               std::vector<Privilege>* out) const final {
+        out->push_back(
+            Privilege(ResourcePattern::forClusterResource(), ActionType::applicationMessage));
+    }
+
+    bool run(OperationContext* opCtx,
+             const std::string& ns,
+             const BSONObj& cmdObj,
+             BSONObjBuilder& result) final {
+        auto msgElem = cmdObj["logMessage"];
+        uassert(ErrorCodes::BadValue, "logMessage must be a string", msgElem.type() == String);
+
+        log() << "logMessage: " << msgElem.valueStringData();
+        return true;
+    }
+};
+
+MONGO_REGISTER_TEST_COMMAND(CmdLogMessage);
+
 }  // namespace
 }  // namespace mongo
diff --git a/src/mongo/db/initialize_server_global_state.cpp b/src/mongo/db/initialize_server_global_state.cpp
index 05c90bb7a65..9607b566dd2 100644
--- a/src/mongo/db/initialize_server_global_state.cpp
+++ b/src/mongo/db/initialize_server_global_state.cpp
@@ -313,6 +313,7 @@ MONGO_INITIALIZER_GENERAL(
 
     logger::globalLogDomain()->attachAppender(
         std::make_unique<RamLogAppender>(RamLog::get("global")));
+    logger::LogstreamBuilder::setNewlineEscape();
 
     return Status::OK();
 }
diff --git a/src/mongo/embedded/mongo_embedded/mongo_embedded_test.cpp b/src/mongo/embedded/mongo_embedded/mongo_embedded_test.cpp
index c4db59d99cb..3a52cc81f5c 100644
--- a/src/mongo/embedded/mongo_embedded/mongo_embedded_test.cpp
+++ b/src/mongo/embedded/mongo_embedded/mongo_embedded_test.cpp
@@ -579,6 +579,7 @@ TEST_F(MongodbCAPITest, RunListCommands) {
         "listDatabases",
         "listIndexes",
         "lockInfo",
+        "logMessage",
         "ping",
         "planCacheClear",
         "planCacheClearFilters",
diff --git a/src/mongo/logger/logstream_builder.cpp b/src/mongo/logger/logstream_builder.cpp
index d21b50e49e8..5f64e7be51f 100644
--- a/src/mongo/logger/logstream_builder.cpp
+++ b/src/mongo/logger/logstream_builder.cpp
@@ -70,6 +70,8 @@ struct ThreadOstreamCacheFinalizer {
 
 namespace logger {
 
+bool LogstreamBuilder::newlineEscape = false;
+
 LogstreamBuilder::LogstreamBuilder(MessageLogDomain* domain,
                                    StringData contextName,
                                    LogSeverity severity)
diff --git a/src/mongo/logger/logstream_builder.h b/src/mongo/logger/logstream_builder.h
index 2ea07987521..176663e573a 100644
--- a/src/mongo/logger/logstream_builder.h
+++ b/src/mongo/logger/logstream_builder.h
@@ -115,24 +115,19 @@ public:
     }
 
     LogstreamBuilder& operator<<(const char* x) {
-        stream() << x;
-        return *this;
+        return appendEscapedString(x);
     }
     LogstreamBuilder& operator<<(const std::string& x) {
-        stream() << x;
-        return *this;
+        return appendEscapedString(x);
     }
     LogstreamBuilder& operator<<(StringData x) {
-        stream() << x;
-        return *this;
+        return appendEscapedString(x);
     }
     LogstreamBuilder& operator<<(char* x) {
-        stream() << x;
-        return *this;
+        return appendEscapedString(x);
     }
     LogstreamBuilder& operator<<(char x) {
-        stream() << x;
-        return *this;
+        return appendEscapedChar(x);
     }
     LogstreamBuilder& operator<<(int x) {
         stream() << x;
@@ -201,8 +196,7 @@ public:
 
     template <typename T>
     LogstreamBuilder& operator<<(const T& x) {
-        stream() << x.toString();
-        return *this;
+        return appendEscapedString(x.toString());
     }
 
     LogstreamBuilder& operator<<(std::ostream& (*manip)(std::ostream&)) {
@@ -230,9 +224,57 @@ public:
      */
     void operator<<(Tee* tee);
 
+    /**
+     * Enable newilne escaping behavior.
+     */
+    static void setNewlineEscape() {
+        newlineEscape = true;
+    }
+
 private:
+    /**
+     * Global option to escape newlines.
+     */
+    static bool newlineEscape;
+
     void makeStream();
 
+    // Append a string explicitly escaping \r and \n only.
+    LogstreamBuilder& appendEscapedString(StringData x) {
+        if (newlineEscape) {
+            auto idx = std::min(x.find('\r'), x.find('\n'));
+            while (idx != std::string::npos) {
+                if (idx > 0) {
+                    stream() << x.substr(0, idx);
+                }
+                appendEscapedChar(x[idx]);
+                x = x.substr(idx + 1);
+                idx = std::min(x.find('\r'), x.find('\n'));
+            }
+        }
+
+        stream() << x;
+        return *this;
+    }
+
+    LogstreamBuilder& appendEscapedChar(char ch) {
+        if (newlineEscape) {
+            switch (ch) {
+                case '\n':
+                    stream() << "\\n";
+                    break;
+                case '\r':
+                    stream() << "\\r";
+                    break;
+                default:
+                    stream() << ch;
+            }
+        } else {
+            stream() << ch;
+        }
+        return *this;
+    }
+
     MessageLogDomain* _domain;
     std::string _contextName;
     LogSeverity _severity;
-- 
2.34.1

