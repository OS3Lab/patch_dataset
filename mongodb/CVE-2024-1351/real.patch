From 1d959ddb773145fc2df52ed6ee0077a6c2f75442 Mon Sep 17 00:00:00 2001
From: "W. Brad Moore" <brad.moore@mongodb.com>
Date: Fri, 22 Dec 2023 16:43:31 +0000
Subject: [PATCH] SERVER-72839, SERVER-80677, SERVER-82257, SERVER-85511,
 SERVER-84267: System CA Cert Verification Fix

(cherry picked from commit 3e37b1e2a4c341cd456125c804f7700b3056519a)
(cherry picked from commit 0fa3e980681b3369fb369fe8d107350ab9547fa1)
(cherry picked from commit 9e65329f5ece552803735bb70ddcf29a9d94a989)
(cherry picked from commit 80995175cbe24fa2c998e20f62b92d24cac521e3)
(cherry picked from commit 7bf52c58275907eab6fb5b67d9b5207e4f3da202)

GitOrigin-RevId: 4d95b44dd90ddf18dfd64bdc030da785ef067f14
---
 .../resmokeconfig/suites/ssl_linear.yml       | 23 +++++
 etc/evergreen.yml                             | 10 ++
 jstests/libs/ca.pem.digest.sha1               |  1 +
 jstests/libs/splithorizon-ca.pem              | 55 -----------
 jstests/libs/splithorizon-server.pem          | 93 +++++++++----------
 jstests/libs/trusted-ca.pem.digest.sha1       |  1 +
 jstests/libs/trusted-client.pem.digest.sha1   |  1 +
 .../ssl/config-canonicalize-normal-ports.js   |  1 +
 jstests/ssl/libs/ssl_helpers.js               |  5 +-
 jstests/ssl/mongo_uri_secondaries.js          | 75 ---------------
 jstests/ssl/peer_validation_without_cafile.js | 86 +++++++++++++++++
 jstests/ssl/repl_ssl_noca.js                  | 56 -----------
 jstests/ssl/repl_ssl_split_horizon.js         |  8 +-
 jstests/ssl/ssl_ca_options.js                 | 74 +++++++++++++++
 jstests/ssl/ssl_cert_selector.js              | 60 ------------
 jstests/ssl/ssl_cert_selector_apple.js        |  2 +-
 .../ssl/ssl_client_bad_certificate_warning.js |  1 +
 jstests/ssl/ssl_count_protocols.js            |  1 +
 jstests/ssl/ssl_fragment.js                   |  4 +
 jstests/ssl/ssl_invalid_server_cert.js        |  2 +-
 ...{ssl_without_ca.js => ssl_mongodb_x509.js} | 19 +++-
 jstests/ssl/ssl_restricted_protocols.js       |  8 +-
 jstests/ssl/x509/certs.yml                    | 11 +--
 jstests/sslSpecial/upgrade_to_ssl_nossl.js    | 33 ++++++-
 jstests/ssl_linear/mongo_uri_secondaries.js   | 82 ++++++++++++++++
 jstests/ssl_linear/repl_ssl_noca.js           | 79 ++++++++++++++++
 jstests/ssl_linear/ssl_cert_selector.js       | 67 +++++++++++++
 .../{ssl => ssl_linear}/ssl_with_system_ca.js | 51 +++++++---
 .../db/commands/authentication_commands.cpp   |  4 -
 src/mongo/db/startup_warnings_common.cpp      | 21 -----
 src/mongo/util/net/SConscript                 |  6 +-
 src/mongo/util/net/ssl_manager.cpp            |  1 -
 src/mongo/util/net/ssl_manager_apple.cpp      | 23 +----
 src/mongo/util/net/ssl_manager_openssl.cpp    |  8 +-
 src/mongo/util/net/ssl_manager_windows.cpp    | 14 +--
 src/mongo/util/net/ssl_options.h              |  1 +
 src/mongo/util/net/ssl_options_server.cpp     | 20 +++-
 src/mongo/util/net/ssl_options_server.idl     |  7 ++
 src/mongo/util/net/ssl_types.h                |  1 -
 39 files changed, 610 insertions(+), 405 deletions(-)
 create mode 100644 buildscripts/resmokeconfig/suites/ssl_linear.yml
 create mode 100644 jstests/libs/ca.pem.digest.sha1
 delete mode 100644 jstests/libs/splithorizon-ca.pem
 create mode 100644 jstests/libs/trusted-ca.pem.digest.sha1
 create mode 100644 jstests/libs/trusted-client.pem.digest.sha1
 delete mode 100644 jstests/ssl/mongo_uri_secondaries.js
 create mode 100644 jstests/ssl/peer_validation_without_cafile.js
 delete mode 100644 jstests/ssl/repl_ssl_noca.js
 create mode 100644 jstests/ssl/ssl_ca_options.js
 delete mode 100644 jstests/ssl/ssl_cert_selector.js
 rename jstests/ssl/{ssl_without_ca.js => ssl_mongodb_x509.js} (81%)
 create mode 100644 jstests/ssl_linear/mongo_uri_secondaries.js
 create mode 100644 jstests/ssl_linear/repl_ssl_noca.js
 create mode 100644 jstests/ssl_linear/ssl_cert_selector.js
 rename jstests/{ssl => ssl_linear}/ssl_with_system_ca.js (50%)

diff --git a/buildscripts/resmokeconfig/suites/ssl_linear.yml b/buildscripts/resmokeconfig/suites/ssl_linear.yml
new file mode 100644
index 00000000000..3c3eacb1f78
--- /dev/null
+++ b/buildscripts/resmokeconfig/suites/ssl_linear.yml
@@ -0,0 +1,23 @@
+test_kind: js_test
+
+# Similar to the `ssl` suite, but configured by evergreen to run sequentially, so that the
+# contents of the Windows system certificate store are only affected by one test at a time.
+selector:
+  roots:
+  - jstests/ssl_linear/*.js
+
+# ssl tests start their own mongod's.
+executor:
+  config:
+    shell_options:
+      nodb: ''
+      ssl: ''
+      sslAllowInvalidCertificates: ''
+      sslCAFile: jstests/libs/ca.pem
+      sslPEMKeyFile: jstests/libs/client.pem
+      global_vars:
+        TestData:
+          setParameters:
+            logComponentVerbosity: "{network:2}"
+          setParametersMongos:
+            logComponentVerbosity: "{network:2}"
diff --git a/etc/evergreen.yml b/etc/evergreen.yml
index 01d6464268b..985a11e9e08 100644
--- a/etc/evergreen.yml
+++ b/etc/evergreen.yml
@@ -5612,6 +5612,16 @@ tasks:
       suite: ssl_x509
       resmoke_args: --storageEngine=wiredTiger
 
+- <<: *gen_task_template
+  name: ssl_linear_gen
+  tags: ["encrypt", "ssl"]
+  commands:
+  - func: "generate resmoke tasks"
+    vars:
+      suite: ssl_linear
+      resmoke_jobs_max: 1
+      resmoke_args: --storageEngine=wiredTiger
+
 - <<: *task_template
   name: jsCore_decimal
   tags: ["jscore", "common", "decimal"]
diff --git a/jstests/libs/ca.pem.digest.sha1 b/jstests/libs/ca.pem.digest.sha1
new file mode 100644
index 00000000000..b152d326f77
--- /dev/null
+++ b/jstests/libs/ca.pem.digest.sha1
@@ -0,0 +1 @@
+42405DFCAB1F1B1BC97938B7ADD0ED82975226A8
diff --git a/jstests/libs/splithorizon-ca.pem b/jstests/libs/splithorizon-ca.pem
deleted file mode 100644
index 1e4c6b7d251..00000000000
--- a/jstests/libs/splithorizon-ca.pem
+++ /dev/null
@@ -1,55 +0,0 @@
-# Autogenerated file, do not edit.
-# Generate using jstests/ssl/x509/mkcert.py --config jstests/ssl/x509/certs.yml splithorizon-ca.pem
-#
-# CA for split horizon testing.
------BEGIN CERTIFICATE-----
-MIIDxTCCAq0CBAbRjKEwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMREw
-DwYDVQQIDAhOZXcgWW9yazEWMBQGA1UEBwwNTmV3IFlvcmsgQ2l0eTEPMA0GA1UE
-CwwGS2VybmVsMRYwFAYDVQQKDA1Nb25nb0RCLCBJbmMuMSUwIwYDVQQDDBxLZXJu
-ZWwgU3BsaXQgSG9yaXpvbiBUZXN0IENBMB4XDTE5MDkyNTIzMjc0MVoXDTM5MDky
-NzIzMjc0MVowgYgxCzAJBgNVBAYTAlVTMREwDwYDVQQIDAhOZXcgWW9yazEWMBQG
-A1UEBwwNTmV3IFlvcmsgQ2l0eTEPMA0GA1UECwwGS2VybmVsMRYwFAYDVQQKDA1N
-b25nb0RCLCBJbmMuMSUwIwYDVQQDDBxLZXJuZWwgU3BsaXQgSG9yaXpvbiBUZXN0
-IENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAo0TJf1iHbrrfaIQR
-fD6B+rV/xWY/viCaCwsbCZHUV3U2Dwpn2viUfREN2GeEPjgGmnJDZZx2qmDS+buc
-8oBtWxXRKpjLYfE1Q74yW1VBrgOx+jB3QtzLkUkO4PE7XU7XhIhoTfnCMfoozbHB
-BJPaAq43F3uj7+0/mNtIx6dop4eYeediVu9hV4pcszw0A8hexq++wC6DkA5a0HSQ
-kzB4aEwDPzT1FyV2XCVfeR815ILq1pkV3VqDStRyA7VnHqAB3C+yQLfnJWKpK5+Q
-dB2Qteahu2RuHkkmYYxhW048GLrkJIo+gBwLMQa6zaxMclwezA9ha3IYPZUZm0P1
-X3DFFwIDAQABozowODAMBgNVHRMEBTADAQH/MB0GA1UdDgQWBBTwa66R4xToFuU8
-kq7yJ/XcdcUxazAJBgNVHSMEAjAAMA0GCSqGSIb3DQEBCwUAA4IBAQAlykRMELMG
-k+MuyXNsX579gcAS+OEf9DibIrauqzeobYByYPdfaRYKZSZzRkv1dLtsb4Lb1Oz5
-or5OwEh5sdmVVAJWAEhKzsiikionzv40kRo0jR5P1poa0GfD4QSSHNlZLH9W6o0N
-El94wLUlfJMK0PVtRxhABRDWPiSRQEHt/rxNRs+1KCFqkb5+1v0qpeIZO3aFWy1l
-slw2MFI97mEENdAhFFYj/vnvP48AJjuOH3klyOAqt3oxzv+kmPhf+4CLgUKlNfOD
-0hRDaElv7c43fQrALVrvpXo5ji2u9OEkNJaZX8bPLLSEF6faxXjroqTXx1kyjT8/
-Z+hfghV4o8o2
------END CERTIFICATE-----
------BEGIN PRIVATE KEY-----
-MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCjRMl/WIduut9o
-hBF8PoH6tX/FZj++IJoLCxsJkdRXdTYPCmfa+JR9EQ3YZ4Q+OAaackNlnHaqYNL5
-u5zygG1bFdEqmMth8TVDvjJbVUGuA7H6MHdC3MuRSQ7g8TtdTteEiGhN+cIx+ijN
-scEEk9oCrjcXe6Pv7T+Y20jHp2inh5h552JW72FXilyzPDQDyF7Gr77ALoOQDlrQ
-dJCTMHhoTAM/NPUXJXZcJV95HzXkgurWmRXdWoNK1HIDtWceoAHcL7JAt+clYqkr
-n5B0HZC15qG7ZG4eSSZhjGFbTjwYuuQkij6AHAsxBrrNrExyXB7MD2Frchg9lRmb
-Q/VfcMUXAgMBAAECggEANRkv9wyRrz9zXQhmr2Oc3i6dCVQBsxHjR2grOOeGiZMD
-K80UjbB+ilY7jH/OEHYkH6K9rJRAO5UVyEZt+qgt6Iul5RagPpA15Hw84FtP6wok
-nduZTdOFGRELl7ict/HmQaIjWgi6UYqsLol63sQ/CNQj8q0xWdxs7IeUmeomLSV1
-RHt2J5oZDD7au0P7IuKvHdBIHCkGlmuZu3yBL8nthXTJC0nvBcncm0H82u56KBAM
-YVgYrJgk7LJrHCnN47+r/jK/XoIE/Y8l363OlyIisoMo97tJvxREvBfeNZkJwn6f
-Y3+wFrHGcVqLofVvLGFdMXP6398iGDUojZHGvTy7gQKBgQDMgrNddAM5c/AxZ0Yy
-Yt6wU/EEeH/YpWYSYybyFbRWJGxVBhU/WMBysaVUsMg09ymolT++b/Qf3uubi7ra
-fgE7nUoAPDn+6b3OhOZ0vZv38YgCtym1LHZ9mn1RmdHn70GFtY7izy7HaSVrV+EG
-vz6Kpa2ubgwAnH8ts7NA7xSAtwKBgQDMX+3qeUWOmh7s+5l+YyGIMxg1rK4hU5sw
-cK/67CPKQbts+qfQRGCdFGGIejqlFd71aruXH/Gl+co8gZORPrZ2hN0f8zo+bZuK
-XE62bQPSH47WzvIu1sxYAxT9xRkUGf/eQHyfz/DIRXQ9XZ2FboC+5hv76/V6iOeZ
-MFjmCBy+oQKBgDpzZKZiIQXLsCu+k56VCYamBy267vdRlpHMyvXH5En2kQvf+DSp
-vh9JzLIe8KnKtppbReO9Ba4SPY6wahBGkT2jn+HfVMgZsEkVTPSyuKAt5Sy5gu8o
-LRmLDSREbWz3wedgU91ZT8por+w1KriN8mcYIULIax/FmsfKI4J8koSTAoGBAI1F
-ynoINlKqqrH6AVJiR+2UFCoWIZAb8Ox9GMiErwDCi0J7ycCnY3lxezIR+7Pd+G8A
-xodip3Gpx2gn0c/W393xXcEWKq64qYns4OQtWzTGZ8CI8NP72ukDyGDa+8jvZ/VD
-8mGuJazqhb1dluODTS+odLOhmeCH/j/gMbNg7C3BAoGAOt7cat5LBCnXQ3SkzBIK
-+yk782+3LMsATXhYQoeXlYdtsF2bMo81DHTsyl2MnZByzebWf9ZaCJVqawCySlmt
-ORTr33UBgJSCmgseM6ajAMFI27PhLcvBuMQZdV+o/gw0GvjdRIYT0FQFsvmKri0s
-m5I7XxnSMtW0JmDpJDw710A=
------END PRIVATE KEY-----
diff --git a/jstests/libs/splithorizon-server.pem b/jstests/libs/splithorizon-server.pem
index e486ca09ed9..4d1cc059811 100644
--- a/jstests/libs/splithorizon-server.pem
+++ b/jstests/libs/splithorizon-server.pem
@@ -3,53 +3,52 @@
 #
 # Server certificate for split horizon testing.
 -----BEGIN CERTIFICATE-----
-MIIDxTCCAq0CBG18bjcwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMREw
-DwYDVQQIDAhOZXcgWW9yazEWMBQGA1UEBwwNTmV3IFlvcmsgQ2l0eTEPMA0GA1UE
-CwwGS2VybmVsMRYwFAYDVQQKDA1Nb25nb0RCLCBJbmMuMSUwIwYDVQQDDBxLZXJu
-ZWwgU3BsaXQgSG9yaXpvbiBUZXN0IENBMB4XDTE5MDkyNTIzMjc0MVoXDTM5MDky
-NzIzMjc0MVowgYExCzAJBgNVBAYTAlVTMREwDwYDVQQIDAhOZXcgWW9yazEWMBQG
-A1UEBwwNTmV3IFlvcmsgQ2l0eTEPMA0GA1UECwwGS2VybmVsMSUwIwYDVQQKDBxN
-b25nb0RCLCBJbmMuIChTcGxpdGhvcml6b24pMQ8wDQYDVQQDDAZzZXJ2ZXIwggEi
-MA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDOUX6ohGPZ2CwRPG0saESuTrDg
-2sgw1CemD5cLZKMf2aykyuZpjc2SBlHsMAg76vsHoTi1FYPN8XhYZvCAk18gmVTr
-kMGSDA2NNPwnXi9jCmytyo3xr7kK7zxrl/UmMUbzcoZRchxH8iYI8Vv104qYvPuI
-OXeF2b3PHObbW9og95qUsUhPHujR5VY3adSoM9S6uNVPhR6XMpuPsQLIej8w+Os7
-kw3vka28VvCzSKBDxfC4ECjhaC28ZCqASwdzLM3lw/JpEw4S3xiVY4ubr87p8NBL
-6TLG3jitw+pbDNsfZJ86uA04V0HvBlAA3DZeG4c9wGmKyV7fcCZd/q40WaOhAgMB
-AAGjQTA/MD0GA1UdEQQ2MDSCCWxvY2FsaG9zdIIJMTI3LjAuMC4xgg1zcGxpdGhv
-cml6b24xgg1zcGxpdGhvcml6b24yMA0GCSqGSIb3DQEBCwUAA4IBAQAocddH/Lua
-ngW8o51IuHc6xa25+9PcAlI7XNfiNYeGBznCadGNtYO7jTu8MUyQuY7FO25PnJOM
-xvEj2tQ78a0ndofrPZuNnoLPsvbaaaeDzfJCyo1gHEpM3fbKNgZaN2Lcp9Xqfiz/
-KQH5TRt3FzVCnaad7eLINW6gC4Sy/Gcrr7D3HMf+pwqm+NXMAgjh34VXzD7YgUqr
-78rCjkLThTwUuXyRJpBnLQUKOFbAXtZGmy0W0YuUk71YfpSxwWIN5JHYrs7mImYc
-Jh825CzGLf1gBVKgiuUpAl8pWjXhbC0ISoVuUvyrppqslUSn8nHQEdbXoNjAq6Fb
-70/3O2SxopTr
+MIIDtTCCAp2gAwIBAgIEbRXtRTANBgkqhkiG9w0BAQsFADB0MQswCQYDVQQGEwJV
+UzERMA8GA1UECAwITmV3IFlvcmsxFjAUBgNVBAcMDU5ldyBZb3JrIENpdHkxEDAO
+BgNVBAoMB01vbmdvREIxDzANBgNVBAsMBktlcm5lbDEXMBUGA1UEAwwOS2VybmVs
+IFRlc3QgQ0EwHhcNMjQwMTA4MTIyMDQ0WhcNNDQwMTEwMTIyMDQ0WjCBgTELMAkG
+A1UEBhMCVVMxETAPBgNVBAgMCE5ldyBZb3JrMRYwFAYDVQQHDA1OZXcgWW9yayBD
+aXR5MQ8wDQYDVQQLDAZLZXJuZWwxJTAjBgNVBAoMHE1vbmdvREIsIEluYy4gKFNw
+bGl0aG9yaXpvbikxDzANBgNVBAMMBnNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQAD
+ggEPADCCAQoCggEBANL/AjW8DSL0p7r7btft2bwtV7Z1SAfTd17t6+CwWLKU3qSA
+rH8VI8pSPdIpwoYfwBpBMACdyMogclfhKg84HHkhIBEogfsVgQKYuyR4Q37SoMCR
+D4+Uim4n13SW5bCUWTzdX5Gr+LQHBnMQEMAu1YO/NHd1+6LrtamIyQaAnxQBzU/P
+mLpqnAQxnwasIF9o+4Px/99BznZYORH+PibVQL1Zj4l78GBirMgYHnHoksdITv1B
+XQ/Wn1vN54WM4zdpDLXEtICEKPLTt76mfxTMR4VcyTDcNyfnkmVh5jbBXgbES2dZ
++csbTTfzN/3TvqwDRalcSlBKhmXQMdYWZq8GHPECAwEAAaNBMD8wPQYDVR0RBDYw
+NIIJbG9jYWxob3N0ggkxMjcuMC4wLjGCDXNwbGl0aG9yaXpvbjGCDXNwbGl0aG9y
+aXpvbjIwDQYJKoZIhvcNAQELBQADggEBAH2AeGsK6xr/QPlKo/C4wW6hHGBTUKIw
+8uEhK0r4TnEMwhlfmr8JWozbjDFlfmk6Ddeh6s0a56NIlCSmX95BwKTl9Z9wNPV2
+kaKjXB97DFuT/vKgGlY7rzpvQ0t6wxTWdSWlOl4U6VPq7fh/1xr9d4BhU0CTH3q8
+FIY8UOI+hT2G4VKGrna5ZjAFq7bCaz99fC+wXg4xFdy46SbbWuDfxVXPiz7BetzM
+2O/kxZ3coV0l6WtCXZOchETP5CJbp+cZyetNoQPFYPEMiGAhPJ+IppanRR5blNa0
+N7+s3Wfm9RBGPQ72jgLI/SSe4jtxVxBYMVYkmcibn1Gy+MyA0HnFA1w=
 -----END CERTIFICATE-----
 -----BEGIN PRIVATE KEY-----
-MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDOUX6ohGPZ2CwR
-PG0saESuTrDg2sgw1CemD5cLZKMf2aykyuZpjc2SBlHsMAg76vsHoTi1FYPN8XhY
-ZvCAk18gmVTrkMGSDA2NNPwnXi9jCmytyo3xr7kK7zxrl/UmMUbzcoZRchxH8iYI
-8Vv104qYvPuIOXeF2b3PHObbW9og95qUsUhPHujR5VY3adSoM9S6uNVPhR6XMpuP
-sQLIej8w+Os7kw3vka28VvCzSKBDxfC4ECjhaC28ZCqASwdzLM3lw/JpEw4S3xiV
-Y4ubr87p8NBL6TLG3jitw+pbDNsfZJ86uA04V0HvBlAA3DZeG4c9wGmKyV7fcCZd
-/q40WaOhAgMBAAECggEAbbZEZhRQjK05ccjyPSUNMKvDvy5YOi73DoVHytUvMWat
-OcxzjjnL0RTvR2ubVVF1P+9pmlHgjwkS9991kMnNUiZ3U/TcGm+yXR6J391j0YTf
-meMWbCkHe1sQhB6ATFjz481Iw9KsW03XD/ZY8nYVQ3drQltcxZ6uIo657HgBnHlZ
-Adit6FGLn2fJ30324zq7T2/OlSwiJosKD6/1M4OWSG5AC0pl10+wtWOAlSWhb/7R
-3NVLHs3va5obLuGDje0ovj9QWfYNEUqZyDiFJ7N96ZFRj3axFEjmjv2kDylV2xVW
-d+zf+3jPDKcGfZZtTj8HuMjaWRmJtkv0+GQXjEd3CQKBgQD8tCmT+yK5bYCvTLIr
-rtI2fVfHyD9SoL27UIrh4hWHnhJJYpT3JXxDwSHttrH18Zlx0KXvM0h38fbx6cl1
-4Rfe6/1cV0dnCy35RTrnLJpe4uZFk9LsX4QpwQecLju6wc8PxnrWDo2spLdRX8IY
-AElP+SlUZ61BdzJg639EckRk3wKBgQDRAnDCDqypB/VW7ZkhL6tZ2XQqmIPnH1WX
-3u8WZj+BQlQf7wqRig+2qcU1lF1/Ct+4AzPs/Vj53+yAs4+UxwodmKZKMWxmUZP7
-KnkGOBpvgWmhw61BhNpAHODV47sgL6oWdcHWLo5uZBs6XE88lQAGOpxCpuEIxE0G
-xyg/qgaHfwKBgBkUKCwveDq+y06aZfQ/3UzbE6MYFHC20x2L2LyiG1DiNx5hUjdU
-2QhAWoWk4/RsjbXl5xHeHQsKUF+hvASe2iedc/9+CfAIBAABBt96ZbeU/RVankwn
-Do62QXMWg4b9RPdj0zz7JMRFdIv23ORU4vG04I0n3OHqWm2T8YVxcagxAoGAdk5T
-VQTJZsRCcvn6e3ZoH2ue/Z1mzCRIZrahzqQBvkC1LX45FTh4vIRMRI++fHLDP31Q
-nwyomIfPbuo0k5o2d5o4RjbDjQcQJFNePc7z57nw+MeyAiwY/cFa4rcM7KMOO7hc
-B8hChunTH62wjDIq2VvDp1aeej/i+bsxZRfwqjECgYBrndvRmtLdJzaBPPPYur43
-xpU6rfIXV8D1Nm1R2X7Ughp/Vz12Gg1/gaGQ5pSZ+/u0IXam6ZCQuSMsGiQSd0rA
-Icdcga+hBt1D+CAhFRwqkmlSURVG5UZfVzf8H1cnq4674VG1N8HkFNXz6br1+jXp
-on3G+UTIsxZtWSpO6sRBkw==
+MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDS/wI1vA0i9Ke6
++27X7dm8LVe2dUgH03de7evgsFiylN6kgKx/FSPKUj3SKcKGH8AaQTAAncjKIHJX
+4SoPOBx5ISARKIH7FYECmLskeEN+0qDAkQ+PlIpuJ9d0luWwlFk83V+Rq/i0BwZz
+EBDALtWDvzR3dfui67WpiMkGgJ8UAc1Pz5i6apwEMZ8GrCBfaPuD8f/fQc52WDkR
+/j4m1UC9WY+Je/BgYqzIGB5x6JLHSE79QV0P1p9bzeeFjOM3aQy1xLSAhCjy07e+
+pn8UzEeFXMkw3Dcn55JlYeY2wV4GxEtnWfnLG0038zf9076sA0WpXEpQSoZl0DHW
+FmavBhzxAgMBAAECggEAJlLCFH95BVnZo0kq21Zsv1SfA1lvAVjj7B6bwr5VBe6r
+N8bVTenJi+R/LQ5/sfvPWRVxAhOmlivpiNOxX31KEqg1Gli4ryG7Qnz6NMgRPlZE
+c2WFpYcN068x34/O3VE8miT9SEirjgtenQSUfkujZWATyATqdS+J2eap2KABBNFw
+Kgg2pEJ1iURx5a59bjQrqCJCRFKQa00+ZwCc6dOb5iGpFjJVvaDjHmZ9PFrQrcpn
+kA3aQBtqd7YsDNF3zsm8FYNGXrqKy04Ls1XNHrmwtF6LDTluQT6VKJNDgYNtXAfP
+zY8owHTzBZMpaaPA7r92Oy1IW7SU6ezQOkmUCmG7rwKBgQD/iIcHkMh4r8AQpRg+
+KOYP0ucCazGzPcDQIncyarwefxdeuxqmwbSbrhY/9IVpRTz+zkxLy3cKkjmqJtmR
+6dgjWPj7ZDirdddnZ1CqWTYxfiG/GU5Nm8lNVlzI6Zqat+q9DNt8Cvqm+CqyJYEI
+s+t8rgR7kr07NTaCEpD4EfYtVwKBgQDTYah9+AbmOcP0Ne7f0lJ91LlB8Djox+1j
+Oy+wa58G6g9o3YhravGfm1U++yesz/Lq4QU2TUB7RHlD5bSrdmqUUkLAinZy0Esq
+nyfMOfjVaU3/uGDxb7ZBuMgOb0BFqJICHSMzfKAxX20DjbFWPqABnZjJvZBglqSL
+QTKEsMnS9wKBgQD+k/pS4z+WXSIwcwpwAzcRVMCpfDoLpN5PfcbbB9NbXqrdyfKH
+aDyTTSEFnoq7kitugAErEg4LDhs9FW91G1AmByIm8nYy/DgZ4KhQzohbTpo4VPHa
+B/bJgdz2nSVWNx06M3EHZ7jIWD3RNeQT04wsrwHwSwUT07P2aqDbRKnKCQKBgQCO
+FZLAObvJfQKuYKJUaHdyhU6Rd/uI3PpAPURs/apDZ4k8H8zXB2eqtSqzzvZ4Pr82
+ClMKkRrKwNgSP5EVv98cG78q1OeRfVlJKPoDWORd7w6y2SiwoTqNKruumDFHoWuj
+aBqFPTwgc9g/DzsokafT7i8JTBaEFj48LHLcpkjDOQKBgEdTVm6k0fZe6VpVk3P+
+yKaZr439zVBkfljRbhvpVi1Y2B5PRf0S2huiuuoMnTqDJwZT0E97SzrueRntehaV
+2rjhKXMuGer2ZaDI8UZ1my8L/mWFhBqcOq+LJzsm3gwDBNXnGN4QufkC7EYzNCpj
+soZZWJqx8D/D//jhX/Zj7vEv
 -----END PRIVATE KEY-----
diff --git a/jstests/libs/trusted-ca.pem.digest.sha1 b/jstests/libs/trusted-ca.pem.digest.sha1
new file mode 100644
index 00000000000..d3bb3006d1b
--- /dev/null
+++ b/jstests/libs/trusted-ca.pem.digest.sha1
@@ -0,0 +1 @@
+4BB673E358FCCD0307B21C0CF0CEFC9F30A1607B
\ No newline at end of file
diff --git a/jstests/libs/trusted-client.pem.digest.sha1 b/jstests/libs/trusted-client.pem.digest.sha1
new file mode 100644
index 00000000000..0752d22780f
--- /dev/null
+++ b/jstests/libs/trusted-client.pem.digest.sha1
@@ -0,0 +1 @@
+6AE38B35F4551B6BDCDB89AFABE0B277046F2735
\ No newline at end of file
diff --git a/jstests/ssl/config-canonicalize-normal-ports.js b/jstests/ssl/config-canonicalize-normal-ports.js
index e1e8f176a92..ddb815ade23 100644
--- a/jstests/ssl/config-canonicalize-normal-ports.js
+++ b/jstests/ssl/config-canonicalize-normal-ports.js
@@ -6,6 +6,7 @@
 const mongod = MongoRunner.runMongod({
     tlsOnNormalPorts: '',
     tlsCertificateKeyFile: 'jstests/libs/server.pem',
+    tlsCAFile: 'jstests/libs/ca.pem'
 });
 assert(mongod);
 assert.commandWorked(mongod.getDB('admin').runCommand({hello: 1}));
diff --git a/jstests/ssl/libs/ssl_helpers.js b/jstests/ssl/libs/ssl_helpers.js
index 0dec92a2c00..95ed6bea496 100644
--- a/jstests/ssl/libs/ssl_helpers.js
+++ b/jstests/ssl/libs/ssl_helpers.js
@@ -288,6 +288,7 @@ function detectDefaultTLSProtocol() {
         useLogFiles: true,
         tlsLogVersions: "TLS1_0,TLS1_1,TLS1_2,TLS1_3",
         waitForConnect: true,
+        tlsCAFile: CA_CERT
     });
 
     assert.eq(0,
@@ -296,9 +297,9 @@ function detectDefaultTLSProtocol() {
                               '--port',
                               conn.port,
                               '--sslPEMKeyFile',
-                              'jstests/libs/client.pem',
+                              CLIENT_CERT,
                               '--sslCAFile',
-                              'jstests/libs/ca.pem',
+                              CA_CERT,
                               '--eval',
                               ';'));
 
diff --git a/jstests/ssl/mongo_uri_secondaries.js b/jstests/ssl/mongo_uri_secondaries.js
deleted file mode 100644
index 73cca540c80..00000000000
--- a/jstests/ssl/mongo_uri_secondaries.js
+++ /dev/null
@@ -1,75 +0,0 @@
-// On OSX this test assumes that jstests/libs/trusted-ca.pem has been added as a trusted
-// certificate to the login keychain of the evergreen user. See,
-// https://github.com/10gen/buildslave-cookbooks/commit/af7cabe5b6e0885902ebd4902f7f974b64cc8961
-// for details.
-// To install trusted-ca.pem for local testing on OSX, invoke the following at a console:
-//   security add-trusted-cert -d jstests/libs/trusted-ca.pem
-(function() {
-'use strict';
-
-const HOST_TYPE = getBuildInfo().buildEnvironment.target_os;
-if (HOST_TYPE == "windows") {
-    // OpenSSL backed imports Root CA and intermediate CA
-    runProgram("certutil.exe", "-addstore", "-user", "-f", "CA", "jstests\\libs\\trusted-ca.pem");
-
-    // SChannel backed follows Windows rules and only trusts the Root store in Local Machine and
-    // Current User.
-    runProgram("certutil.exe", "-addstore", "-f", "Root", "jstests\\libs\\trusted-ca.pem");
-}
-
-const x509Options = {
-    sslMode: 'requireSSL',
-    sslPEMKeyFile: 'jstests/libs/trusted-server.pem',
-    sslCAFile: 'jstests/libs/trusted-ca.pem',
-    sslAllowInvalidCertificates: '',
-    sslWeakCertificateValidation: '',
-};
-
-const rst = new ReplSetTest(
-    {nodes: 2, name: "sslSet", useHostName: false, nodeOptions: x509Options, waitForKeys: false});
-rst.startSet();
-rst.initiate();
-
-const subShellCommand = function(hosts) {
-    var Ms = [];
-    for (var i = 0; i < 10; i++) {
-        Ms.push(
-            new Mongo("mongodb://" + hosts[0] + "," + hosts[1] + "/?ssl=true&replicaSet=sslSet"));
-    }
-
-    for (var i = 0; i < 10; i++) {
-        var db = Ms[i].getDB("test");
-        db.setSecondaryOk();
-        db.col.find().readPref("secondary").toArray();
-    }
-};
-
-const subShellCommandFormatter = function(replSet) {
-    var hosts = [];
-    replSet.nodes.forEach((node) => {
-        hosts.push("localhost:" + node.port);
-    });
-
-    let command = `
-            (function () {
-                'use strict';
-                let command = ${subShellCommand.toString()};
-                let hosts = ${tojson(hosts)};
-                command(hosts);
-            }());`;
-
-    return command;
-};
-
-function runWithEnv(args, env) {
-    const pid = _startMongoProgram({args: args, env: env});
-    return waitProgram(pid);
-}
-
-const subShellArgs = ['mongo', '--nodb', '--eval', subShellCommandFormatter(rst)];
-
-const retVal = runWithEnv(subShellArgs, {"SSL_CERT_FILE": "jstests/libs/trusted-ca.pem"});
-assert.eq(retVal, 0, 'mongo shell did not succeed with exit code 0');
-
-rst.stopSet();
-}());
diff --git a/jstests/ssl/peer_validation_without_cafile.js b/jstests/ssl/peer_validation_without_cafile.js
new file mode 100644
index 00000000000..9f1ed043525
--- /dev/null
+++ b/jstests/ssl/peer_validation_without_cafile.js
@@ -0,0 +1,86 @@
+(function() {
+"use strict";
+
+if (getBuildInfo().buildEnvironment.target_os != "linux") {
+    // these tests are specifically for linux
+    return;
+}
+
+function testRS(opts, succeed) {
+    const origSkipCheck = TestData.skipCheckDBHashes;
+    const rsOpts = {
+        // Use localhost so that SAN matches.
+        useHostName: false,
+        nodes: {node0: opts, node1: opts},
+    };
+    const rs = new ReplSetTest(rsOpts);
+    rs.startSet({
+        env: {
+            SSL_CERT_FILE: 'jstests/libs/ca.pem',
+        },
+    });
+    if (succeed) {
+        rs.initiate();
+        assert.commandWorked(rs.getPrimary().getDB('admin').runCommand({hello: 1}));
+    } else {
+        // By default, rs.initiate takes a very long time to timeout. We should shorten this
+        // period, because we expect it to fail. ReplSetTest has both a static and local copy
+        // of kDefaultTimeOutMS, so we must override both.
+        const oldTimeout = ReplSetTest.kDefaultTimeoutMS;
+        const shortTimeout = 2 * 60 * 1000;
+        ReplSetTest.kDefaultTimeoutMS = shortTimeout;
+        rs.kDefaultTimeoutMS = shortTimeout;
+        // The rs.initiate will fail in an assert.soon, which would ordinarily trigger the hang
+        // analyzer.  We don't want that to happen, so we disable it here.
+        MongoRunner.runHangAnalyzer.disable();
+        try {
+            assert.throws(function() {
+                rs.initiate();
+            });
+        } finally {
+            ReplSetTest.kDefaultTimeoutMS = oldTimeout;
+            MongoRunner.runHangAnalyzer.enable();
+        }
+        TestData.skipCheckDBHashes = true;
+    }
+    rs.stopSet();
+    TestData.skipCheckDBHashes = origSkipCheck;
+}
+
+// ca.pem signed client.pem and server.pem
+// trusted-ca.pem signed trusted-client.pem and trusted-server.pem
+
+// Sanity check that ca.pem can be used to properly authenticate.
+const options_manual_systemca = {
+    tlsMode: 'requireTLS',
+    tlsCAFile: 'jstests/libs/ca.pem',
+    tlsCertificateKeyFile: 'jstests/libs/server.pem',
+
+};
+testRS(options_manual_systemca, true);
+
+// Ensure that we can authenticate with system CA.
+const options_systemca = {
+    tlsMode: 'requireTLS',
+    tlsCertificateKeyFile: 'jstests/libs/server.pem',
+    setParameter: {tlsUseSystemCA: true},
+};
+testRS(options_systemca, true);
+
+// Sanity check that ca.pem can be used to properly fail to authenticate.
+const options_manual_systemca_nomatch = {
+    tlsMode: 'requireTLS',
+    tlsCAFile: 'jstests/libs/ca.pem',
+    tlsCertificateKeyFile: 'jstests/libs/trusted-server.pem',
+};
+testRS(options_manual_systemca_nomatch, false);
+
+// Ensure that we can properly fail to authenticate with system CA.
+const options_systemca_nomatch = {
+    tlsMode: 'requireTLS',
+    tlsCertificateKeyFile: 'jstests/libs/trusted-server.pem',
+    setParameter: {tlsUseSystemCA: true},
+};
+
+testRS(options_systemca_nomatch, false);
+}());
diff --git a/jstests/ssl/repl_ssl_noca.js b/jstests/ssl/repl_ssl_noca.js
deleted file mode 100644
index 258530ccc9a..00000000000
--- a/jstests/ssl/repl_ssl_noca.js
+++ /dev/null
@@ -1,56 +0,0 @@
-(function() {
-'use strict';
-if (_isWindows()) {
-    // OpenSSL backed imports Root CA and intermediate CA
-    runProgram("certutil.exe", "-addstore", "-user", "-f", "CA", "jstests\\libs\\trusted-ca.pem");
-
-    // SChannel backed follows Windows rules and only trusts the Root store in Local Machine and
-    // Current User.
-    runProgram("certutil.exe", "-addstore", "-f", "Root", "jstests\\libs\\trusted-ca.pem");
-}
-
-var replTest = new ReplSetTest({
-    name: "ssltest",
-    nodes: 1,
-    nodeOptions: {
-        sslMode: "requireSSL",
-        sslPEMKeyFile: "jstests/libs/trusted-server.pem",
-    },
-    host: "localhost",
-    useHostName: false,
-});
-
-replTest.startSet({
-    env: {
-        SSL_CERT_FILE: 'jstests/libs/trusted-ca.pem',
-    },
-});
-replTest.initiate();
-
-var nodeList = replTest.nodeList().join();
-
-var checkShellOkay = function(url) {
-    // Should not be able to authenticate with x509.
-    // Authenticate call will return 1 on success, 0 on error.
-    var argv = ['mongo', url, '--eval', ('db.runCommand({replSetGetStatus: 1})')];
-    if (!_isWindows()) {
-        // On Linux we override the default path to the system CA store to point to our
-        // "trusted" CA. On Windows, this CA will have been added to the user's trusted CA list
-        argv.unshift("env", "SSL_CERT_FILE=jstests/libs/trusted-ca.pem");
-    }
-    return runMongoProgram(...argv);
-};
-
-var noMentionSSLURL = `mongodb://${nodeList}/admin?replicaSet=${replTest.name}`;
-jsTestLog(`Replica set url (doesn't mention SSL): ${noMentionSSLURL}`);
-assert.neq(checkShellOkay(noMentionSSLURL), 0, "shell correctly failed to connect without SSL");
-
-var useSSLURL = `mongodb://${nodeList}/admin?replicaSet=${replTest.name}&ssl=true`;
-jsTestLog(`Replica set url (uses SSL): ${useSSLURL}`);
-assert.eq(checkShellOkay(useSSLURL), 0, "successfully connected with SSL");
-
-var disableSSLURL = `mongodb://${nodeList}/admin?replicaSet=${replTest.name}&ssl=false`;
-jsTestLog(`Replica set url (doesnt use SSL): ${disableSSLURL}`);
-assert.neq(checkShellOkay(disableSSLURL), 0, "shell correctly failed to connect without SSL");
-replTest.stopSet();
-})();
diff --git a/jstests/ssl/repl_ssl_split_horizon.js b/jstests/ssl/repl_ssl_split_horizon.js
index 44f6fc8f9d2..08cb9422a23 100644
--- a/jstests/ssl/repl_ssl_split_horizon.js
+++ b/jstests/ssl/repl_ssl_split_horizon.js
@@ -76,6 +76,7 @@ var replTest = new ReplSetTest({
     nodeOptions: {
         sslMode: "requireSSL",
         sslPEMKeyFile: "jstests/libs/splithorizon-server.pem",
+        setParameter: {tlsUseSystemCA: true},
     },
     host: "localhost",
     useHostName: false,
@@ -83,7 +84,7 @@ var replTest = new ReplSetTest({
 
 replTest.startSet({
     env: {
-        SSL_CERT_FILE: 'jstests/libs/splithorizon-ca.pem',
+        SSL_CERT_FILE: 'jstests/libs/ca.pem',
     },
 });
 
@@ -118,8 +119,11 @@ var checkExpectedHorizon = function(url, memberIndex, expectedHostname) {
     var argv = [
         'env',
         "HOSTALIASES=" + hostsFile,
-        "SSL_CERT_FILE=jstests/libs/splithorizon-ca.pem",
+        "SSL_CERT_FILE=jstests/libs/ca.pem",
         'mongo',
+        '--tls',
+        '--tlsCertificateKeyFile',
+        'jstests/libs/splithorizon-server.pem',
         url,
         '--eval',
         assertion
diff --git a/jstests/ssl/ssl_ca_options.js b/jstests/ssl/ssl_ca_options.js
new file mode 100644
index 00000000000..25052b49b52
--- /dev/null
+++ b/jstests/ssl/ssl_ca_options.js
@@ -0,0 +1,74 @@
+var SERVER_CERT = "jstests/libs/server.pem";
+var CA_CERT = "jstests/libs/ca.pem";
+
+// Neither tlsCAFile nor tlsUseSystemCA
+var opts = {
+    tlsMode: "requireTLS",
+    tlsCertificateKeyFile: SERVER_CERT,
+};
+
+assert.eq(null,
+          MongoRunner.runMongod(opts),
+          "MongoD started successfully with neither tlsCAFile nor tlsUseSystemCA");
+assert(rawMongoProgramOutput().includes(
+    "The use of TLS without specifying a chain of trust is no longer supported"));
+clearRawMongoProgramOutput();
+
+// Both tlsCAFile and tlsUseSystemCA
+opts = {
+    tlsMode: "requireTLS",
+    tlsCertificateKeyFile: SERVER_CERT,
+    tlsCAFile: CA_CERT,
+    setParameter: {tlsUseSystemCA: true},
+};
+
+assert.eq(null,
+          MongoRunner.runMongod(opts),
+          "MongoD started successfully with both tlsCAFile and tlsUseSystemCA");
+assert(rawMongoProgramOutput().includes(
+    "The use of both a CA File and the System Certificate store is not supported"));
+clearRawMongoProgramOutput();
+
+// Both tlsCAFile and tlsUseSystemCA, also tlsClusterCAFile (which is OK)
+opts = {
+    tlsMode: "requireTLS",
+    tlsCertificateKeyFile: SERVER_CERT,
+    tlsCAFile: CA_CERT,
+    tlsClusterCAFile: CA_CERT,
+    setParameter: {tlsUseSystemCA: true},
+};
+
+assert.eq(null,
+          MongoRunner.runMongod(opts),
+          "MongoD started successfully with both tlsCAFile and tlsUseSystemCA");
+assert(rawMongoProgramOutput().includes(
+    "The use of both a CA File and the System Certificate store is not supported"));
+clearRawMongoProgramOutput();
+
+// tlsClusterCAFile without tlsCAFile
+opts = {
+    tlsMode: "requireTLS",
+    tlsCertificateKeyFile: SERVER_CERT,
+    tlsClusterCAFile: CA_CERT,
+};
+
+assert.eq(null,
+          MongoRunner.runMongod(opts),
+          "MongoD started successfully with tlsClusterCAFile without tlsCAFile");
+assert(rawMongoProgramOutput().includes(
+    "Specifying a tlsClusterCAFile requires a tlsCAFile also be specified"));
+clearRawMongoProgramOutput();
+
+// tlsClusterCAFile without tlsCAFile, also tlsSystemCA (which is ignored in favor of former error)
+opts = {
+    tlsMode: "requireTLS",
+    tlsCertificateKeyFile: SERVER_CERT,
+    tlsClusterCAFile: CA_CERT,
+    setParameter: {tlsUseSystemCA: true},
+};
+
+assert.eq(null,
+          MongoRunner.runMongod(opts),
+          "MongoD started successfully with tlsClusterCAFile without tlsCAFile");
+assert(rawMongoProgramOutput().includes(
+    "Specifying a tlsClusterCAFile requires a tlsCAFile also be specified"));
\ No newline at end of file
diff --git a/jstests/ssl/ssl_cert_selector.js b/jstests/ssl/ssl_cert_selector.js
deleted file mode 100644
index 11c97eff270..00000000000
--- a/jstests/ssl/ssl_cert_selector.js
+++ /dev/null
@@ -1,60 +0,0 @@
-/**
- * Validate that the shell can load certificates from the certificate store and connect to the
- * server.
- */
-
-load('jstests/ssl/libs/ssl_helpers.js');
-
-requireSSLProvider('windows', function() {
-    'use strict';
-
-    if (_isWindows()) {
-        // SChannel backed follows Windows rules and only trusts Root in LocalMachine
-        runProgram("certutil.exe", "-addstore", "-f", "Root", "jstests\\libs\\trusted-ca.pem");
-
-        // Import a pfx file since it contains both a cert and private key and is easy to import
-        // via command line.
-        runProgram("certutil.exe",
-                   "-importpfx",
-                   "-f",
-                   "-p",
-                   "qwerty",
-                   "jstests\\libs\\trusted-client.pfx");
-    }
-
-    const conn = MongoRunner.runMongod(
-        {sslMode: 'requireSSL', sslPEMKeyFile: "jstests\\libs\\trusted-server.pem"});
-
-    const testWithCert = function(certSelector) {
-        jsTest.log(`Testing with SSL cert ${certSelector}`);
-        const argv = [
-            'mongo',
-            '--ssl',
-            '--sslCertificateSelector',
-            certSelector,
-            '--port',
-            conn.port,
-            '--eval',
-            'db.runCommand({buildInfo: 1})'
-        ];
-
-        const exitStatus = runMongoProgram.apply(null, argv);
-        assert.eq(exitStatus, 0, "successfully connected with SSL");
-    };
-
-    assert.doesNotThrow(function() {
-        try {
-            // trusted-client.pfx
-            testWithCert("thumbprint=6AE38B35F4551B6BDCDB89AFABE0B277046F2735");
-        } catch (e) {
-            // Transitional: Pre Oct-2019 trusted-client.pfx
-            testWithCert("thumbprint=9ca511552f14d3fc2009d425873599bf77832238");
-        }
-    });
-
-    assert.doesNotThrow(function() {
-        testWithCert("subject=Trusted Kernel Test Client");
-    });
-
-    MongoRunner.stopMongod(conn);
-});
diff --git a/jstests/ssl/ssl_cert_selector_apple.js b/jstests/ssl/ssl_cert_selector_apple.js
index 0f23f04eed6..6992252f066 100644
--- a/jstests/ssl/ssl_cert_selector_apple.js
+++ b/jstests/ssl/ssl_cert_selector_apple.js
@@ -35,7 +35,7 @@ requireSSLProvider('apple', function() {
             sslCertificateSelector: cert.selector,
             sslClusterCertificateSelector: cluster.selector,
             waitForConnect: false,
-            setParameter: {logLevel: '1'},
+            setParameter: {logLevel: '1', tlsUseSystemCA: true},
         };
         clearRawMongoProgramOutput();
         const mongod = MongoRunner.runMongod(opts);
diff --git a/jstests/ssl/ssl_client_bad_certificate_warning.js b/jstests/ssl/ssl_client_bad_certificate_warning.js
index 1e63c5a7489..0952f99645d 100644
--- a/jstests/ssl/ssl_client_bad_certificate_warning.js
+++ b/jstests/ssl/ssl_client_bad_certificate_warning.js
@@ -42,6 +42,7 @@ let mongod = MongoRunner.runMongod({
     tlsMode: "requireTLS",
     tlsCertificateKeyFile: SERVER_CERT,
     tlsClusterCAFile: CA_CERT,
+    tlsCAFile: CA_CERT,
 });
 
 runTests();
diff --git a/jstests/ssl/ssl_count_protocols.js b/jstests/ssl/ssl_count_protocols.js
index 80426002c29..04ab15b0e03 100644
--- a/jstests/ssl/ssl_count_protocols.js
+++ b/jstests/ssl/ssl_count_protocols.js
@@ -32,6 +32,7 @@ function runTestWithoutSubset(client) {
         sslDisabledProtocols: 'none',
         useLogFiles: true,
         tlsLogVersions: "TLS1_0,TLS1_1,TLS1_2,TLS1_3",
+        tlsCAFile: CA_CERT
     });
 
     print(disabledProtocols);
diff --git a/jstests/ssl/ssl_fragment.js b/jstests/ssl/ssl_fragment.js
index e585b9ac706..fb31769dc35 100644
--- a/jstests/ssl/ssl_fragment.js
+++ b/jstests/ssl/ssl_fragment.js
@@ -24,12 +24,16 @@ let options = {
     sslMode: "requireSSL",
     sslPEMKeyFile: "jstests/libs/server.pem",
     networkMessageCompressors: 'disabled',
+    tlsCAFile: 'jstests/libs/ca.pem',
+    sslAllowInvalidCertificates: ""
 };
 
 let mongosOptions = {
     sslMode: "requireSSL",
     sslPEMKeyFile: "jstests/libs/server.pem",
     networkMessageCompressors: 'disabled',
+    tlsCAFile: 'jstests/libs/ca.pem',
+    sslAllowInvalidCertificates: ""
 };
 
 if (_isWindows()) {
diff --git a/jstests/ssl/ssl_invalid_server_cert.js b/jstests/ssl/ssl_invalid_server_cert.js
index 96cca8c0075..20b5c9e275b 100644
--- a/jstests/ssl/ssl_invalid_server_cert.js
+++ b/jstests/ssl/ssl_invalid_server_cert.js
@@ -35,5 +35,5 @@ runTest('expired', expired, validityMessage);
 
 // Test that startup fails with no certificate at all.
 const needKeyFile = 'need tlsCertificateKeyFile or certificateSelector when TLS is enabled';
-runTest('no-key-file', {tlsMode: 'requireTLS'}, needKeyFile);
+runTest('no-key-file', {tlsMode: 'requireTLS', tlsCAFile: 'jstests/libs/ca.pem'}, needKeyFile);
 })();
diff --git a/jstests/ssl/ssl_without_ca.js b/jstests/ssl/ssl_mongodb_x509.js
similarity index 81%
rename from jstests/ssl/ssl_without_ca.js
rename to jstests/ssl/ssl_mongodb_x509.js
index ef3f64949aa..ea028290bc0 100644
--- a/jstests/ssl/ssl_without_ca.js
+++ b/jstests/ssl/ssl_mongodb_x509.js
@@ -5,7 +5,8 @@ var CLIENT_USER = "C=US,ST=New York,L=New York City,O=MongoDB,OU=KernelUser,CN=c
 jsTest.log("Assert x509 auth is not allowed when a standalone mongod is run without a CA file.");
 
 // allowSSL instead of requireSSL so that the non-SSL connection succeeds.
-var conn = MongoRunner.runMongod({sslMode: 'allowSSL', sslPEMKeyFile: SERVER_CERT, auth: ''});
+var conn = MongoRunner.runMongod(
+    {sslMode: 'allowSSL', sslPEMKeyFile: SERVER_CERT, auth: '', tlsCAFile: 'jstests/libs/ca.pem'});
 
 var external = conn.getDB('$external');
 external.createUser({
@@ -36,9 +37,15 @@ MongoRunner.stopMongod(conn);
 
 jsTest.log("Assert mongod doesn\'t start with CA file missing and clusterAuthMode=x509.");
 
-var sslParams = {clusterAuthMode: 'x509', sslMode: 'requireSSL', sslPEMKeyFile: SERVER_CERT};
-var conn = MongoRunner.runMongod(sslParams);
-assert.isnull(conn, "server started with x509 clusterAuthMode but no CA file");
+var sslParams = {
+    clusterAuthMode: 'x509',
+    sslMode: 'requireSSL',
+    setParameter: {tlsUseSystemCA: true},
+    sslPEMKeyFile: SERVER_CERT
+};
+assert.eq(null,
+          MongoRunner.runMongod(sslParams),
+          "server started with x509 clusterAuthMode but no CA file");
 
 jsTest.log("Assert mongos doesn\'t start with CA file missing and clusterAuthMode=x509.");
 
@@ -55,10 +62,12 @@ var startOptions = {
     configsvr: "",
     storageEngine: "wiredTiger",
     sslMode: 'allowSSL',
-    sslPEMKeyFile: 'jstests/libs/trusted-server.pem'
+    sslPEMKeyFile: 'jstests/libs/trusted-server.pem',
+    tlsCAFile: 'jstests/libs/ca.pem'
 };
 
 var configRS = new ReplSetTest(rstOptions);
+
 configRS.startSet(startOptions);
 var mongos = MongoRunner.runMongos({
     clusterAuthMode: 'x509',
diff --git a/jstests/ssl/ssl_restricted_protocols.js b/jstests/ssl/ssl_restricted_protocols.js
index 1ea7c0dd209..de971b945a4 100644
--- a/jstests/ssl/ssl_restricted_protocols.js
+++ b/jstests/ssl/ssl_restricted_protocols.js
@@ -10,8 +10,12 @@ var CA_CERT = "jstests/libs/ca.pem";
 
 function runTestWithoutSubset(subset) {
     const disabledProtocols = subset.join(",");
-    const conn = MongoRunner.runMongod(
-        {sslMode: 'allowSSL', sslPEMKeyFile: SERVER_CERT, sslDisabledProtocols: disabledProtocols});
+    const conn = MongoRunner.runMongod({
+        sslMode: 'allowSSL',
+        sslPEMKeyFile: SERVER_CERT,
+        sslDisabledProtocols: disabledProtocols,
+        tlsCAFile: CA_CERT
+    });
 
     const exitStatus = runMongoProgram('mongo',
                                        '--ssl',
diff --git a/jstests/ssl/x509/certs.yml b/jstests/ssl/x509/certs.yml
index e61426b3381..3454ff542fe 100644
--- a/jstests/ssl/x509/certs.yml
+++ b/jstests/ssl/x509/certs.yml
@@ -735,19 +735,10 @@ certs:
 # Split Horizon
 ###
 
-- name: 'splithorizon-ca.pem'
-  description: CA for split horizon testing.
-  Subject: {O: 'MongoDB, Inc.', CN: 'Kernel Split Horizon Test CA'}
-  Issuer: self
-  extensions:
-    subjectKeyIdentifier: hash
-    authorityKeyIdentifier: keyid
-    basicConstraints: {CA: true}
-
 - name: 'splithorizon-server.pem'
   description: Server certificate for split horizon testing.
   Subject: {O: 'MongoDB, Inc. (Splithorizon)', CN: 'server'}
-  Issuer: 'splithorizon-ca.pem'
+  Issuer: 'ca.pem'
   extensions:
     subjectAltName:
       DNS:
diff --git a/jstests/sslSpecial/upgrade_to_ssl_nossl.js b/jstests/sslSpecial/upgrade_to_ssl_nossl.js
index 5f30cb2695d..fc835d5359b 100644
--- a/jstests/sslSpecial/upgrade_to_ssl_nossl.js
+++ b/jstests/sslSpecial/upgrade_to_ssl_nossl.js
@@ -8,6 +8,9 @@
  */
 
 load("jstests/ssl/libs/ssl_helpers.js");
+var SERVER_CERT = "jstests/libs/server.pem";
+var CA_CERT = "jstests/libs/ca.pem";
+var CLIENT_CERT = "jstests/libs/client.pem";
 
 var rst = new ReplSetTest({
     name: 'sslSet',
@@ -16,7 +19,9 @@ var rst = new ReplSetTest({
         {},
         {rsConfig: {priority: 0}},
     ],
-    nodeOptions: {sslMode: "disabled"}
+    nodeOptions: {
+        sslMode: "disabled",
+    }
 });
 rst.startSet();
 rst.initiate();
@@ -26,18 +31,36 @@ rstConn1.getDB("test").a.insert({a: 1, str: "TESTTESTTEST"});
 assert.eq(1, rstConn1.getDB("test").a.find().itcount(), "Error interacting with replSet");
 
 print("===== UPGRADE disabled -> allowSSL =====");
-rst.upgradeSet({sslMode: "allowSSL", sslPEMKeyFile: SERVER_CERT, sslAllowInvalidCertificates: ""});
+rst.upgradeSet({
+    sslMode: "allowSSL",
+    sslCAFile: CA_CERT,
+    sslPEMKeyFile: SERVER_CERT,
+    sslAllowInvalidHostnames: "",
+});
 var rstConn2 = rst.getPrimary();
 rstConn2.getDB("test").a.insert({a: 2, str: "TESTTESTTEST"});
 assert.eq(2, rstConn2.getDB("test").a.find().itcount(), "Error interacting with replSet");
 
 print("===== UPGRADE allowSSL -> preferSSL =====");
-rst.upgradeSet({sslMode: "preferSSL", sslPEMKeyFile: SERVER_CERT, sslAllowInvalidCertificates: ""});
+rst.upgradeSet({
+    sslMode: "preferSSL",
+    sslCAFile: CA_CERT,
+    sslPEMKeyFile: SERVER_CERT,
+});
 var rstConn3 = rst.getPrimary();
 rstConn3.getDB("test").a.insert({a: 3, str: "TESTTESTTEST"});
 assert.eq(3, rstConn3.getDB("test").a.find().itcount(), "Error interacting with replSet");
 
-var canConnectSSL = runMongoProgram(
-    "mongo", "--port", rst.ports[0], "--ssl", "--sslAllowInvalidCertificates", "--eval", ";");
+print("===== Ensure SSL Connectable =====");
+var canConnectSSL = runMongoProgram("mongo",
+                                    "--port",
+                                    rst.ports[0],
+                                    "--ssl",
+                                    '--sslCAFile',
+                                    CA_CERT,
+                                    '--sslPEMKeyFile',
+                                    CLIENT_CERT,
+                                    "--eval",
+                                    ";");
 assert.eq(0, canConnectSSL, "SSL Connection attempt failed when it should succeed");
 rst.stopSet();
diff --git a/jstests/ssl_linear/mongo_uri_secondaries.js b/jstests/ssl_linear/mongo_uri_secondaries.js
new file mode 100644
index 00000000000..374693d4667
--- /dev/null
+++ b/jstests/ssl_linear/mongo_uri_secondaries.js
@@ -0,0 +1,82 @@
+// On OSX this test assumes that jstests/libs/trusted-ca.pem has been added as a trusted
+// certificate to the login keychain of the evergreen user. See,
+// https://github.com/10gen/buildslave-cookbooks/commit/af7cabe5b6e0885902ebd4902f7f974b64cc8961
+// for details.
+// To install trusted-ca.pem for local testing on OSX, invoke the following at a console:
+//   security add-trusted-cert -d jstests/libs/trusted-ca.pem
+
+const HOST_TYPE = getBuildInfo().buildEnvironment.target_os;
+if (HOST_TYPE == "windows") {
+    // OpenSSL backed imports Root CA and intermediate CA
+    runProgram("certutil.exe", "-addstore", "-user", "-f", "CA", "jstests\\libs\\trusted-ca.pem");
+
+    // SChannel backed follows Windows rules and only trusts the Root store in Local Machine and
+    // Current User.
+    runProgram("certutil.exe", "-addstore", "-f", "Root", "jstests\\libs\\trusted-ca.pem");
+}
+try {
+    const x509Options = {
+        sslMode: 'requireSSL',
+        sslPEMKeyFile: 'jstests/libs/trusted-server.pem',
+        sslCAFile: 'jstests/libs/trusted-ca.pem',
+        sslAllowInvalidCertificates: '',
+        sslWeakCertificateValidation: '',
+    };
+
+    const rst = new ReplSetTest({
+        nodes: 2,
+        name: "sslSet",
+        useHostName: false,
+        nodeOptions: x509Options,
+        waitForKeys: false
+    });
+    rst.startSet();
+    rst.initiate();
+
+    const subShellCommand = function(hosts) {
+        var Ms = [];
+        for (var i = 0; i < 10; i++) {
+            Ms.push(new Mongo("mongodb://" + hosts[0] + "," + hosts[1] +
+                              "/?ssl=true&replicaSet=sslSet"));
+        }
+
+        for (var i = 0; i < 10; i++) {
+            var db = Ms[i].getDB("test");
+            db.setSecondaryOk();
+            db.col.find().readPref("secondary").toArray();
+        }
+    };
+
+    const subShellCommandFormatter = function(replSet) {
+        var hosts = [];
+        replSet.nodes.forEach((node) => {
+            hosts.push("localhost:" + node.port);
+        });
+        let command = `
+                (function () {
+                    'use strict';
+                    let command = ${subShellCommand.toString()};
+                    let hosts = ${tojson(hosts)};
+                    command(hosts);
+                }());`;
+        return command;
+    };
+
+    function runWithEnv(args, env) {
+        const pid = _startMongoProgram({args: args, env: env});
+        return waitProgram(pid);
+    }
+
+    const subShellArgs = ['mongo', '--nodb', '--eval', subShellCommandFormatter(rst)];
+
+    const retVal = runWithEnv(subShellArgs, {"SSL_CERT_FILE": "jstests/libs/trusted-ca.pem"});
+    assert.eq(retVal, 0, 'mongo shell did not succeed with exit code 0');
+
+    rst.stopSet();
+} finally {
+    if (HOST_TYPE == "windows") {
+        const trusted_ca_thumbprint = cat('jstests/libs/ca.pem.digest.sha1');
+        runProgram("certutil.exe", "-delstore", "-f", "Root", trusted_ca_thumbprint);
+        runProgram("certutil.exe", "-delstore", "-user", "-f", "CA", trusted_ca_thumbprint);
+    }
+}
diff --git a/jstests/ssl_linear/repl_ssl_noca.js b/jstests/ssl_linear/repl_ssl_noca.js
new file mode 100644
index 00000000000..93b0e24a39f
--- /dev/null
+++ b/jstests/ssl_linear/repl_ssl_noca.js
@@ -0,0 +1,79 @@
+// On OSX this test assumes that jstests/libs/trusted-ca.pem has been added as a trusted
+// certificate to the login keychain of the evergreen user. See,
+// https://github.com/10gen/buildslave-cookbooks/commit/af7cabe5b6e0885902ebd4902f7f974b64cc8961
+// for details.
+// To install trusted-ca.pem for local testing on OSX, invoke the following at a console:
+//   security add-trusted-cert -d jstests/libs/trusted-ca.pem
+// TODO BUILD-17503 Remove this tag
+// @tags: [incompatible_with_macos]
+
+if (_isWindows()) {
+    // OpenSSL backed imports Root CA and intermediate CA
+    runProgram("certutil.exe", "-addstore", "-user", "-f", "CA", "jstests\\libs\\ca.pem");
+
+    // SChannel backed follows Windows rules and only trusts the Root store in Local Machine and
+    // Current User.
+    runProgram("certutil.exe", "-addstore", "-f", "Root", "jstests\\libs\\ca.pem");
+}
+
+try {
+    var replTest = new ReplSetTest({
+        name: "ssltest",
+        nodes: 1,
+        nodeOptions: {
+            sslMode: "requireSSL",
+            sslPEMKeyFile: "jstests/libs/server.pem",
+            setParameter: {tlsUseSystemCA: true},
+        },
+        host: "localhost",
+        useHostName: false,
+    });
+
+    replTest.startSet({
+        env: {
+            SSL_CERT_FILE: 'jstests/libs/ca.pem',
+        },
+    });
+
+    replTest.initiate();
+
+    var nodeList = replTest.nodeList().join();
+
+    var checkShell = function(url) {
+        // Should not be able to authenticate with x509.
+        // Authenticate call will return 1 on success, 0 on error.
+        var argv = ['mongo', url, '--eval', ('db.runCommand({replSetGetStatus: 1})')];
+
+        if (url.endsWith('&ssl=true')) {
+            argv.push('--tls', '--tlsCertificateKeyFile', 'jstests/libs/client.pem');
+        }
+
+        if (!_isWindows()) {
+            // On Linux we override the default path to the system CA store to point to our
+            // system CA. On Windows, this CA will have been added to the user's trusted CA list
+            argv.unshift("env", "SSL_CERT_FILE=jstests/libs/ca.pem");
+        }
+        var ret = runMongoProgram(...argv);
+        return ret;
+    };
+
+    jsTest.log("Testing with no ssl specification...");
+    var noMentionSSLURL = `mongodb://${nodeList}/admin?replicaSet=${replTest.name}`;
+    assert.neq(checkShell(noMentionSSLURL), 0, "shell correctly failed to connect without SSL");
+
+    jsTest.log("Testing with ssl specified false...");
+    var disableSSLURL = `mongodb://${nodeList}/admin?replicaSet=${replTest.name}&ssl=false`;
+    assert.neq(checkShell(disableSSLURL), 0, "shell correctly failed to connect without SSL");
+
+    jsTest.log("Testing with ssl specified true...");
+    var useSSLURL = `mongodb://${nodeList}/admin?replicaSet=${replTest.name}&ssl=true`;
+    assert.eq(checkShell(useSSLURL), 0, "successfully connected with SSL");
+
+    replTest.stopSet();
+} finally {
+    if (_isWindows()) {
+        const ca_thumbprint = cat('jstests/libs/ca.pem.digest.sha1');
+        runProgram("certutil.exe", "-delstore", "-f", "Root", ca_thumbprint);
+        runProgram("certutil.exe", "-delstore", "-user", "-f", "CA", ca_thumbprint);
+    }
+}
diff --git a/jstests/ssl_linear/ssl_cert_selector.js b/jstests/ssl_linear/ssl_cert_selector.js
new file mode 100644
index 00000000000..2579273b5b1
--- /dev/null
+++ b/jstests/ssl_linear/ssl_cert_selector.js
@@ -0,0 +1,67 @@
+/**
+ * Validate that the shell can load certificates from the certificate store and connect to the
+ * server.
+ */
+
+load('jstests/ssl/libs/ssl_helpers.js');
+
+requireSSLProvider('windows', function() {
+    'use strict';
+
+    if (_isWindows()) {
+        // SChannel backed follows Windows rules and only trusts Root in LocalMachine
+        runProgram("certutil.exe", "-addstore", "-f", "Root", "jstests\\libs\\ca.pem");
+        // Import a pfx file since it contains both a cert and private key and is easy to import
+        // via command line.
+        runProgram("certutil.exe",
+                   "-importpfx",
+                   "-f",
+                   "-p",
+                   "qwerty",
+                   "jstests\\libs\\trusted-client.pfx");
+    }
+
+    try {
+        const conn = MongoRunner.runMongod({
+            sslMode: 'requireSSL',
+            sslPEMKeyFile: "jstests\\libs\\trusted-server.pem",
+            setParameter: {tlsUseSystemCA: true},
+        });
+
+        const testWithCert = function(certSelector) {
+            jsTest.log(`Testing with SSL cert ${certSelector}`);
+            const argv = [
+                'mongo',
+                '--ssl',
+                '--sslCertificateSelector',
+                certSelector,
+                '--port',
+                conn.port,
+                '--eval',
+                'db.runCommand({buildInfo: 1})'
+            ];
+
+            const exitStatus = runMongoProgram.apply(null, argv);
+            assert.eq(exitStatus, 0, "successfully connected with SSL");
+        };
+
+        const trusted_client_thumbprint = cat('jstests/libs/trusted-client.pem.digest.sha1');
+
+        assert.doesNotThrow(function() {
+            testWithCert("thumbprint=" + trusted_client_thumbprint);
+        });
+
+        assert.doesNotThrow(function() {
+            testWithCert("subject=Trusted Kernel Test Client");
+        });
+
+        MongoRunner.stopMongod(conn);
+    } finally {
+        if (_isWindows()) {
+            const trusted_ca_thumbprint = cat('jstests/libs/trusted-ca.pem.digest.sha1');
+            runProgram("certutil.exe", "-delstore", "-f", "Root", trusted_ca_thumbprint);
+            const ca_thumbprint = cat('jstests/libs/ca.pem.digest.sha1');
+            runProgram("certutil.exe", "-delstore", "-f", "Root", ca_thumbprint);
+        }
+    }
+});
diff --git a/jstests/ssl/ssl_with_system_ca.js b/jstests/ssl_linear/ssl_with_system_ca.js
similarity index 50%
rename from jstests/ssl/ssl_with_system_ca.js
rename to jstests/ssl_linear/ssl_with_system_ca.js
index 4626cceeaa9..a9eef168978 100644
--- a/jstests/ssl/ssl_with_system_ca.js
+++ b/jstests/ssl_linear/ssl_with_system_ca.js
@@ -8,6 +8,8 @@
 'use strict';
 
 const HOST_TYPE = getBuildInfo().buildEnvironment.target_os;
+jsTest.log("HOST_TYPE = " + HOST_TYPE);
+
 if (HOST_TYPE == "windows") {
     // OpenSSL backed imports Root CA and intermediate CA
     runProgram("certutil.exe", "-addstore", "-user", "-f", "CA", "jstests\\libs\\trusted-ca.pem");
@@ -16,23 +18,33 @@ if (HOST_TYPE == "windows") {
     // Current User.
     runProgram("certutil.exe", "-addstore", "-f", "Root", "jstests\\libs\\trusted-ca.pem");
 }
-
 function testWithCerts(prefix) {
-    jsTest.log(
-        `Testing with SSL certs $ {
-            clientPem connecting to serverPem
-        }`);
+    jsTest.log("Starting mongod blindly...");
+    // allowTLS to get a non-TLS control connection.
+    var opts = {
+        tlsMode: 'preferTLS',
+        tlsCertificateKeyFile: 'jstests/libs/' + prefix + 'server.pem',
+        waitForConnect: false,
+        setParameter: {tlsUseSystemCA: true},
+        env: {"SSL_CERT_FILE": "jstests/libs/" + prefix + "ca.pem"},
+    };
+    const conn = MongoRunner.runMongod(opts);
 
-    // allowSSL to get a non-SSL control connection.
-    const conn = MongoRunner.runMongod(
-        {sslMode: 'allowSSL', sslPEMKeyFile: 'jstests/libs/' + prefix + 'server.pem'});
+    jsTest.log("Waiting for mongod to be non-TLS connectable...");
+    let argv = ['mongo', '--port', conn.port, '--eval', ';'];
 
-    let argv = [
+    assert.soon((exitCode) => {
+        exitCode = runMongoProgram.apply(null, argv);
+        return 0 == exitCode;
+    });
+
+    jsTest.log("Testing connection with " + prefix + "client.pem ...");
+    argv = [
         'mongo',
-        '--ssl',
+        '--tls',
         '--port',
         conn.port,
-        '--sslPEMKeyFile',
+        '--tlsCertificateKeyFile',
         'jstests/libs/' + prefix + 'client.pem',
         '--eval',
         ';'
@@ -44,11 +56,22 @@ function testWithCerts(prefix) {
         argv.unshift("env", "SSL_CERT_FILE=jstests/libs/trusted-ca.pem");
     }
 
-    const exitCode = runMongoProgram.apply(null, argv);
+    let exitCode = runMongoProgram.apply(null, argv);
+
+    jsTest.log("Stopping mongod...");
     MongoRunner.stopMongod(conn);
+
     return exitCode;
 }
 
-assert.neq(0, testWithCerts(''), 'Certs signed with untrusted CA');
-assert.eq(0, testWithCerts('trusted-'), 'Certs signed with trusted CA');
+try {
+    assert.neq(0, testWithCerts(''), 'Certs signed with untrusted CA');
+    assert.eq(0, testWithCerts('trusted-'), 'Certs signed with trusted CA');
+} finally {
+    if (HOST_TYPE == "windows") {
+        const trusted_ca_thumbprint = cat('jstests/libs/trusted-ca.pem.digest.sha1');
+        runProgram("certutil.exe", "-delstore", "-f", "Root", trusted_ca_thumbprint);
+        runProgram("certutil.exe", "-delstore", "-user", "-f", "CA", trusted_ca_thumbprint);
+    }
+}
 })();
diff --git a/src/mongo/db/commands/authentication_commands.cpp b/src/mongo/db/commands/authentication_commands.cpp
index ab2a72bd3d1..62a897f9f7a 100644
--- a/src/mongo/db/commands/authentication_commands.cpp
+++ b/src/mongo/db/commands/authentication_commands.cpp
@@ -258,10 +258,6 @@ void _authenticateX509(OperationContext* opCtx, AuthenticationSession* session)
 
     auto sslConfiguration = opCtx->getClient()->session()->getSSLConfiguration();
 
-    uassert(ErrorCodes::AuthenticationFailed,
-            "Unable to verify x.509 certificate, as no CA has been provided.",
-            sslConfiguration->hasCA);
-
     uassert(ErrorCodes::ProtocolError,
             "X.509 authentication must always use the $external database.",
             user.getDB() == kExternalDB);
diff --git a/src/mongo/db/startup_warnings_common.cpp b/src/mongo/db/startup_warnings_common.cpp
index aa7dafc5cf8..be3621404ac 100644
--- a/src/mongo/db/startup_warnings_common.cpp
+++ b/src/mongo/db/startup_warnings_common.cpp
@@ -132,27 +132,6 @@ void logCommonStartupWarnings(const ServerGlobalParams& serverParams) {
     }
 #endif
 
-    /*
-     * We did not add the message to startupWarningsLog as the user can not
-     * specify a sslCAFile parameter from the shell
-     */
-    if (sslGlobalParams.sslMode.load() != SSLParams::SSLMode_disabled &&
-#ifdef MONGO_CONFIG_SSL_CERTIFICATE_SELECTORS
-        sslGlobalParams.sslCertificateSelector.empty() &&
-#endif
-        sslGlobalParams.sslCAFile.empty()) {
-#ifdef MONGO_CONFIG_SSL_CERTIFICATE_SELECTORS
-        LOGV2_WARNING(22132,
-                      "No client certificate validation can be performed since no CA file has been "
-                      "provided and no sslCertificateSelector has been specified. Please specify "
-                      "an sslCAFile parameter");
-#else
-        LOGV2_WARNING(22133,
-                      "No client certificate validation can be performed since no CA file has been "
-                      "provided. Please specify an sslCAFile parameter");
-#endif
-    }
-
 #if defined(_WIN32) && !defined(_WIN64)
     // Warn user that they are running a 32-bit app on 64-bit Windows
     BOOL wow64Process;
diff --git a/src/mongo/util/net/SConscript b/src/mongo/util/net/SConscript
index 2af3dd96c81..443fff13925 100644
--- a/src/mongo/util/net/SConscript
+++ b/src/mongo/util/net/SConscript
@@ -33,11 +33,9 @@ env.Library(
     source=[
         "ssl_options.cpp",
     ],
-    LIBDEPS=[
-        '$BUILD_DIR/mongo/base',
-    ],
     LIBDEPS_PRIVATE=[
         '$BUILD_DIR/mongo/db/server_options_core',
+        '$BUILD_DIR/mongo/idl/server_parameter',
         '$BUILD_DIR/mongo/util/options_parser/options_parser',
     ]
 )
@@ -64,13 +62,13 @@ env.Library(
         'ssl_options_server.idl',
     ],
     LIBDEPS=[
-        '$BUILD_DIR/mongo/base',
         'ssl_options',
     ],
     LIBDEPS_PRIVATE=[
         '$BUILD_DIR/mongo/db/auth/auth_options',
         '$BUILD_DIR/mongo/db/auth/cluster_auth_mode',
         '$BUILD_DIR/mongo/db/server_options_core',
+        '$BUILD_DIR/mongo/idl/server_parameter',
         '$BUILD_DIR/mongo/util/options_parser/options_parser',
     ]
 )
diff --git a/src/mongo/util/net/ssl_manager.cpp b/src/mongo/util/net/ssl_manager.cpp
index 6bb855f8058..c784c3792d6 100644
--- a/src/mongo/util/net/ssl_manager.cpp
+++ b/src/mongo/util/net/ssl_manager.cpp
@@ -780,7 +780,6 @@ bool SSLConfiguration::isClusterMember(StringData subjectName) const {
 
 void SSLConfiguration::getServerStatusBSON(BSONObjBuilder* security) const {
     security->append("SSLServerSubjectName", _serverSubjectName.toString());
-    security->appendBool("SSLServerHasCertificateAuthority", hasCA);
     security->appendDate("SSLServerCertificateExpirationDate", serverCertificateExpirationDate);
 }
 
diff --git a/src/mongo/util/net/ssl_manager_apple.cpp b/src/mongo/util/net/ssl_manager_apple.cpp
index 5d71d9c517b..648d55caa7e 100644
--- a/src/mongo/util/net/ssl_manager_apple.cpp
+++ b/src/mongo/util/net/ssl_manager_apple.cpp
@@ -1369,20 +1369,15 @@ SSLManagerApple::SSLManagerApple(const SSLParams& params, bool isServer)
         }
     }
 
+    // If the user has specified --setParameter tlsUseSystemCA=true, then no params.sslCAFile nor
+    // params.sslClusterCAFile will be defined, and the SSL Manager will fall back to the System CA.
     if (!params.sslCAFile.empty()) {
         auto ca = uassertStatusOK(loadPEM(params.sslCAFile, "", kLoadPEMStripKeys));
         _clientCA = std::move(ca);
-        _sslConfiguration.hasCA = _clientCA && ::CFArrayGetCount(_clientCA.get());
-    }
-
-    if (!params.sslCertificateSelector.empty() || !params.sslClusterCertificateSelector.empty()) {
-        // By using the system keychain, we acknowledge it exists.
-        _sslConfiguration.hasCA = true;
     }
 
     if (!_clientCA) {
-        // No explicit CA was specified, use the Keychain CA explicitly on client connects,
-        // even though we're going to pretend it doesn't exist on server.
+        // No explicit CA was specified, use the Keychain CA explicitly
         ::CFArrayRef certs = nullptr;
         uassertOSStatusOK(SecTrustCopyAnchorCertificates(&certs));
         _clientCA.reset(certs);
@@ -1391,7 +1386,6 @@ SSLManagerApple::SSLManagerApple(const SSLParams& params, bool isServer)
     if (!params.sslClusterCAFile.empty()) {
         auto ca = uassertStatusOK(loadPEM(params.sslClusterCAFile, "", kLoadPEMStripKeys));
         _serverCA = std::move(ca);
-        _sslConfiguration.hasCA = true;
     } else {
         // No inbound CA specified, share a reference with outbound CA.
         auto ca = _clientCA.get();
@@ -1558,17 +1552,6 @@ Future<SSLPeerInfo> SSLManagerApple::parseAndValidatePeerCertificate(
 
     recordTLSVersion(tlsVersionStatus.getValue(), hostForLogging);
 
-    /* While we always have a system CA via the Keychain,
-     * we'll pretend not to in terms of validation if the server
-     * was started using a PEM file (legacy mode).
-     *
-     * When a certificate selector is used, we'll override hasCA to true
-     * so that the validation path runs anyway.
-     */
-    if (!_sslConfiguration.hasCA && isSSLServer) {
-        return Future<SSLPeerInfo>::makeReady(SSLPeerInfo(sniName));
-    }
-
     const auto badCert = [&](StringData msg, bool warn = false) -> Future<SSLPeerInfo> {
         if (warn) {
             LOGV2_WARNING(23209,
diff --git a/src/mongo/util/net/ssl_manager_openssl.cpp b/src/mongo/util/net/ssl_manager_openssl.cpp
index 83b43a2c1c8..d2e41c6c17e 100644
--- a/src/mongo/util/net/ssl_manager_openssl.cpp
+++ b/src/mongo/util/net/ssl_manager_openssl.cpp
@@ -2500,6 +2500,8 @@ Status SSLManagerOpenSSL::initSSLContext(SSL_CTX* context,
         }
     }
 
+    // If the user has specified --setParameter tlsUseSystemCA=true, then no params.sslCAFile nor
+    // params.sslClusterCAFile will be defined, and the SSL Manager will fall back to the System CA.
     std::string cafile = params.sslCAFile;
     if (direction == ConnectionDirection::kIncoming && !params.sslClusterCAFile.empty()) {
         cafile = params.sslClusterCAFile;
@@ -2911,7 +2913,6 @@ Status SSLManagerOpenSSL::_setupCA(SSL_CTX* context, const std::string& caFile)
     // Set SSL to require peer (client) certificate verification
     // if a certificate is presented
     SSL_CTX_set_verify(context, SSL_VERIFY_PEER, &SSLManagerOpenSSL::verify_cb);
-    _sslConfiguration.hasCA = true;
     return Status::OK();
 }
 
@@ -2936,7 +2937,7 @@ Status SSLManagerOpenSSL::_setupSystemCA(SSL_CTX* context) {
                           << "(default certificate file: " << X509_get_default_cert_file() << ", "
                           << "default certificate path: " << X509_get_default_cert_dir() << ")"};
     }
-
+    SSL_CTX_set_verify(context, SSL_VERIFY_PEER, &SSLManagerOpenSSL::verify_cb);
     return Status::OK();
 }
 
@@ -3176,9 +3177,6 @@ Future<SSLPeerInfo> SSLManagerOpenSSL::parseAndValidatePeerCertificate(
 
     recordTLSVersion(tlsVersionStatus.getValue(), hostForLogging);
 
-    if (!_sslConfiguration.hasCA && isSSLServer)
-        return SSLPeerInfo(sni);
-
     X509* peerCert = SSL_get_peer_certificate(conn);
 
     if (nullptr == peerCert) {  // no certificate presented by peer
diff --git a/src/mongo/util/net/ssl_manager_windows.cpp b/src/mongo/util/net/ssl_manager_windows.cpp
index 75d5b8810c0..223445b4d62 100644
--- a/src/mongo/util/net/ssl_manager_windows.cpp
+++ b/src/mongo/util/net/ssl_manager_windows.cpp
@@ -1284,11 +1284,9 @@ Status SSLManagerWindows::_loadCertificates(const SSLParams& params) {
         _clientCertificates[0] = std::get<0>(_clusterPEMCertificate).get();
     }
 
+    // If the user has specified --setParameter tlsUseSystemCA=true, then no params.sslCAFile nor
+    // params.sslClusterCAFile will be defined, and the SSL Manager will fall back to the System CA.
     if (!params.sslCAFile.empty()) {
-        // SChannel always has a CA even when the user does not specify one
-        // The openssl implementations uses this to decide if it wants to do certificate validation
-        // on the server side.
-        _sslConfiguration.hasCA = true;
 
         auto swChain = readCertChains(params.sslCAFile, params.sslCRLFile);
         if (!swChain.isOK()) {
@@ -1328,7 +1326,6 @@ Status SSLManagerWindows::_loadCertificates(const SSLParams& params) {
         }
 
         _serverEngine.CAstore = std::move(swChain.getValue());
-        _sslConfiguration.hasCA = true;
     }
     _serverEngine.hasCRL = !params.sslCRLFile.empty();
 
@@ -1352,10 +1349,8 @@ Status SSLManagerWindows::_loadCertificates(const SSLParams& params) {
         if (!params.sslCAFile.empty()) {
             LOGV2_WARNING(23271,
                           "Mixing certs from the system certificate store and PEM files. This may "
-                          "produced unexpected results.");
+                          "produce unexpected results.");
         }
-
-        _sslConfiguration.hasCA = true;
     }
 
     if (_sslCertificate) {
@@ -2001,9 +1996,6 @@ Future<SSLPeerInfo> SSLManagerWindows::parseAndValidatePeerCertificate(
 
     recordTLSVersion(tlsVersionStatus.getValue(), hostForLogging);
 
-    if (!_sslConfiguration.hasCA && isSSLServer)
-        return Future<SSLPeerInfo>::makeReady(SSLPeerInfo(sni));
-
     SECURITY_STATUS ss = QueryContextAttributes(ssl, SECPKG_ATTR_REMOTE_CERT_CONTEXT, &cert);
 
     if (ss == SEC_E_NO_CREDENTIALS) {  // no certificate presented by peer
diff --git a/src/mongo/util/net/ssl_options.h b/src/mongo/util/net/ssl_options.h
index e58bedcd076..13f7303704e 100644
--- a/src/mongo/util/net/ssl_options.h
+++ b/src/mongo/util/net/ssl_options.h
@@ -93,6 +93,7 @@ struct SSLParams {
     bool sslFIPSMode = false;                     // --sslFIPSMode
     bool sslAllowInvalidCertificates = false;     // --sslAllowInvalidCertificates
     bool sslAllowInvalidHostnames = false;        // --sslAllowInvalidHostnames
+    bool sslUseSystemCA = false;                  // --setParameter tlsUseSystemCA
     bool disableNonSSLConnectionLogging =
         false;  // --setParameter disableNonSSLConnectionLogging=true
     bool disableNonSSLConnectionLoggingSet = false;
diff --git a/src/mongo/util/net/ssl_options_server.cpp b/src/mongo/util/net/ssl_options_server.cpp
index 4612993df07..eb67d49e2c3 100644
--- a/src/mongo/util/net/ssl_options_server.cpp
+++ b/src/mongo/util/net/ssl_options_server.cpp
@@ -29,6 +29,7 @@
 
 #define MONGO_LOGV2_DEFAULT_COMPONENT ::mongo::logv2::LogComponent::kControl
 
+#include "mongo/base/error_codes.h"
 #include "mongo/platform/basic.h"
 
 #include "mongo/util/net/ssl_options.h"
@@ -192,14 +193,27 @@ MONGO_STARTUP_OPTIONS_POST(SSLServerOptions)(InitializerContext*) {
 
     const auto clusterAuthMode = serverGlobalParams.startupClusterAuthMode;
     if (sslGlobalParams.sslMode.load() != SSLParams::SSLMode_disabled) {
+        uassert(ErrorCodes::InvalidOptions,
+                "Specifying a tlsClusterCAFile requires a tlsCAFile also be specified. See  "
+                "https://dochub.mongodb.org/core/mongod"
+                "#std-option-mongod.--tlsClusterCAFile for details.",
+                sslGlobalParams.sslClusterCAFile.empty() || !sslGlobalParams.sslCAFile.empty());
+        uassert(ErrorCodes::InvalidOptions,
+                "The use of both a CA File and the System Certificate store is not supported.",
+                !sslGlobalParams.sslUseSystemCA || sslGlobalParams.sslCAFile.empty());
+        uassert(ErrorCodes::InvalidOptions,
+                "The use of TLS without specifying a chain of trust is no longer supported. See "
+                "https://jira.mongodb.org/browse/SERVER-72839 for details.",
+                sslGlobalParams.sslUseSystemCA || !sslGlobalParams.sslCAFile.empty());
+        if (!sslGlobalParams.sslCRLFile.empty() && sslGlobalParams.sslCAFile.empty()) {
+            uasserted(ErrorCodes::BadValue,
+                      "Specifying a tlsCRLFile requires a tlsCAFile also be specified.");
+        }
         bool usingCertifiateSelectors = params.count("net.tls.certificateSelector");
         if (sslGlobalParams.sslPEMKeyFile.size() == 0 && !usingCertifiateSelectors) {
             uasserted(ErrorCodes::BadValue,
                       "need tlsCertificateKeyFile or certificateSelector when TLS is enabled");
         }
-        if (!sslGlobalParams.sslCRLFile.empty() && sslGlobalParams.sslCAFile.empty()) {
-            uasserted(ErrorCodes::BadValue, "need tlsCAFile with tlsCRLFile");
-        }
 
         std::string sslCANotFoundError(
             "No TLS certificate validation can be performed since"
diff --git a/src/mongo/util/net/ssl_options_server.idl b/src/mongo/util/net/ssl_options_server.idl
index 64d7b10aaf0..1ca70c11611 100644
--- a/src/mongo/util/net/ssl_options_server.idl
+++ b/src/mongo/util/net/ssl_options_server.idl
@@ -40,6 +40,13 @@ global:
 imports:
   - "mongo/idl/basic_types.idl"
 
+server_parameters:
+  tlsUseSystemCA:
+    description: "Use System CA for certificate verification"
+    set_at: startup
+    cpp_varname: "sslGlobalParams.sslUseSystemCA"
+    default: false
+
 configs:
   "net.tls.tlsOnNormalPorts":
     description: "Use TLS on configured ports"
diff --git a/src/mongo/util/net/ssl_types.h b/src/mongo/util/net/ssl_types.h
index 6f859ee01aa..e129b549056 100644
--- a/src/mongo/util/net/ssl_types.h
+++ b/src/mongo/util/net/ssl_types.h
@@ -122,7 +122,6 @@ public:
 
     SSLX509Name clientSubjectName;
     Date_t serverCertificateExpirationDate;
-    bool hasCA = false;
 
 private:
     SSLX509Name _serverSubjectName;
-- 
2.34.1

